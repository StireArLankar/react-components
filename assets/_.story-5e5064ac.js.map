{"version":3,"file":"_.story-5e5064ac.js","sources":["../../src/components/gesture/SoftSlider/SoftSlider.tsx","../../src/components/gesture/SoftSlider/Test.tsx","../../src/components/gesture/SoftSlider/_.story.tsx"],"sourcesContent":["import React, { useRef, useEffect, useMemo, useCallback } from 'react'\r\nimport useMeasure from 'react-use-measure'\r\n\r\nimport { useSprings, animated, SpringConfig, to } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nexport interface SliderProps extends DefaultProps {\r\n  children: React.ReactNode[]\r\n  index: number\r\n  onIndexChange: (newIndex: number) => void\r\n  className?: string\r\n  style?: React.CSSProperties\r\n  slideClassName?: string\r\n  slideStyle?: React.CSSProperties | ((index: number) => React.CSSProperties)\r\n  onDragStart?: (pressedIndex: number) => void\r\n  onDragEnd?: (pressedIndex: number) => void\r\n  onTap?: (pressedIndex: number) => void\r\n}\r\n\r\ntype DefaultProps = typeof defaultProps\r\n\r\nconst defaultProps = {\r\n  enabled: true,\r\n  vertical: false,\r\n  slideAlign: 'center',\r\n  draggedScale: 1,\r\n  draggedSpring: { tension: 1200, friction: 40 } as SpringConfig,\r\n  releaseSpring: { tension: 120, friction: 30 } as SpringConfig,\r\n}\r\n\r\n// style for the slides wrapper\r\nconst slidesWrapperStyle = (vertical: boolean): React.CSSProperties => ({\r\n  display: 'flex',\r\n  flexWrap: 'nowrap',\r\n  alignItems: 'stretch',\r\n  position: 'relative',\r\n  userSelect: 'none',\r\n  flexDirection: vertical ? 'column' : 'row',\r\n  touchAction: vertical ? 'pan-x' : 'pan-y',\r\n})\r\n\r\nconst clamp = (num: number, clamp: number, higher: number) =>\r\n  Math.min(Math.max(num, clamp), higher)\r\n\r\nexport const Slider = ({\r\n  children,\r\n  index,\r\n  onIndexChange,\r\n  className,\r\n  style,\r\n  slideStyle,\r\n  slideClassName,\r\n  enabled,\r\n  vertical,\r\n  slideAlign,\r\n  draggedScale,\r\n  draggedSpring,\r\n  releaseSpring,\r\n  onDragStart,\r\n  onDragEnd,\r\n  onTap,\r\n}: SliderProps) => {\r\n  const slideStyleFunc = useMemo(\r\n    () => (typeof slideStyle === 'function' ? slideStyle : () => slideStyle),\r\n    [slideStyle]\r\n  )\r\n\r\n  const root = useRef<HTMLInputElement>(null)\r\n  const [ref, { width, height }] = useMeasure({ debounce: 100 })\r\n  ref(root.current)\r\n\r\n  const axis = vertical ? 'y' : 'x'\r\n\r\n  const getVal = useCallback(\r\n    (tuple: [number, number]) => (vertical ? tuple[1] : tuple[0]),\r\n    [vertical]\r\n  )\r\n\r\n  const size = vertical ? height : width\r\n\r\n  const [minIndex, maxIndex] = [0, children.length - 1]\r\n\r\n  const indexRef = useRef(index)\r\n\r\n  const restPos = useRef(0)\r\n\r\n  const [springs, set] = useSprings(children.length, () => ({\r\n    x: 0,\r\n    y: 0,\r\n    s: 1,\r\n    zIndex: 0,\r\n    immediate: (key) => key === 'zIndex',\r\n  }))\r\n\r\n  useEffect(() => {\r\n    if (!width || !height) {\r\n      return\r\n    }\r\n\r\n    if (axis === 'y') {\r\n      const { offsetTop, offsetHeight } = root.current!.children[\r\n        index\r\n      ] as HTMLElement\r\n      restPos.current = Math.round(-offsetTop + (height - offsetHeight) / 2)\r\n    } else {\r\n      const { offsetLeft, offsetWidth } = root.current!.children[\r\n        index\r\n      ] as HTMLElement\r\n      restPos.current = Math.round(-offsetLeft + (width - offsetWidth) / 2)\r\n    }\r\n\r\n    set.start(() => ({\r\n      [axis]: restPos.current,\r\n      s: 1,\r\n      config: releaseSpring,\r\n    }))\r\n\r\n    indexRef.current = index\r\n  }, [index, set, axis, height, width, releaseSpring])\r\n\r\n  const bind = useDrag(\r\n    ({\r\n      first,\r\n      last,\r\n      tap,\r\n      swipe,\r\n      movement,\r\n      args: [pressedIndex],\r\n      memo = springs[pressedIndex][axis].get(),\r\n    }) => {\r\n      if (tap) {\r\n        onTap && onTap(pressedIndex)\r\n        return\r\n      }\r\n\r\n      const mov = getVal(movement)\r\n\r\n      first && onDragStart && onDragStart(pressedIndex)\r\n\r\n      if (last) {\r\n        const swipeAxis = swipe ? getVal(swipe) : 0\r\n\r\n        if (Math.abs(mov) > size! / 2 || swipeAxis !== 0) {\r\n          indexRef.current = clamp(\r\n            indexRef.current - Math.sign(mov),\r\n            minIndex,\r\n            maxIndex\r\n          )\r\n        }\r\n\r\n        if (index !== indexRef.current) {\r\n          requestAnimationFrame(() => onIndexChange(indexRef.current))\r\n        } else {\r\n          set.start(() => ({\r\n            [axis]: restPos.current,\r\n            s: 1,\r\n            config: releaseSpring,\r\n          }))\r\n        }\r\n\r\n        onDragEnd && onDragEnd(pressedIndex)\r\n      } else {\r\n        set.start((i) => ({\r\n          [axis]: mov + memo,\r\n          s: draggedScale,\r\n          config: draggedSpring,\r\n          zIndex: i === pressedIndex ? 10 : 0,\r\n        }))\r\n      }\r\n\r\n      return memo\r\n    },\r\n    { enabled, axis, filterTaps: true }\r\n  )\r\n\r\n  const rootStyle = slidesWrapperStyle(vertical)\r\n  if (!className) {\r\n    rootStyle.width = '100%'\r\n  }\r\n\r\n  return (\r\n    <div ref={root} className={className} style={{ ...rootStyle, ...style }}>\r\n      {springs.map((styles, i) => (\r\n        <animated.div\r\n          {...bind(i)}\r\n          key={i}\r\n          className={slideClassName}\r\n          style={{\r\n            [vertical ? 'justifyContent' : 'alignItems']: slideAlign,\r\n            display: 'flex',\r\n            ...slideStyleFunc(i),\r\n            zIndex: styles.zIndex.to((val) => val.toFixed(0)),\r\n            transform: to(\r\n              [styles[axis], styles.s],\r\n              (x, s) => `translate${axis.toUpperCase()}(${x}px) scale(${s})`\r\n            ),\r\n            willChange: 'transform',\r\n            touchAction: 'none',\r\n          }}\r\n        >\r\n          {children[i]}\r\n        </animated.div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nSlider.defaultProps = defaultProps\r\n","import { useState } from 'react'\r\n\r\nimport { Slider } from './SoftSlider'\r\n\r\nconst slides = ['red', 'blue', 'yellow', 'orange']\r\nconst style = { width: 300, height: '80%' }\r\n\r\nexport const Test = () => {\r\n  const [index, setIndex] = useState(0)\r\n\r\n  return (\r\n    <Slider\r\n      index={index}\r\n      onIndexChange={setIndex}\r\n      style={{\r\n        width: 400,\r\n        height: 300,\r\n        backgroundColor: 'black',\r\n        overflow: 'hidden',\r\n      }}\r\n    >\r\n      {slides.map((color, i) => (\r\n        <div key={i} style={{ ...style, background: color }} />\r\n      ))}\r\n    </Slider>\r\n  )\r\n}\r\n","import { withCenteredStyle } from '~/_storybook/withCenteredStyle';\nimport { withCustomTheme } from '~/_storybook/withCustomTheme';\nimport { withTopLabel } from '~/_storybook/withTopLabel';\nimport { storyLink } from '~/theme/theme.css';\nimport { Test } from './Test';\nconst label = <>\r\n    <span>Credits to </span>\r\n    <a className={storyLink} href='https://github.com/dbismut/react-soft-slider'>\r\n      dbismut\r\n    </a>\r\n  </>;\nexport default {\n  title: 'Gesture/Soft Slider',\n  decorators: [withCenteredStyle({\n    width: '100%'\n  }), withCustomTheme, withTopLabel(label)]\n};\nexport const SoftSlider = () => <Test />;\nSoftSlider.parameters = {\n  ...SoftSlider.parameters,\n  storySource: {\n    source: \"() => <Test />\",\n    ...SoftSlider.parameters?.storySource\n  }\n};"],"names":["defaultProps","slidesWrapperStyle","vertical","clamp","num","clamp2","higher","Slider","children","index","onIndexChange","className","style","slideStyle","slideClassName","enabled","slideAlign","draggedScale","draggedSpring","releaseSpring","onDragStart","onDragEnd","onTap","slideStyleFunc","useMemo","root","useRef","ref","width","height","useMeasure","axis","getVal","useCallback","tuple","size","minIndex","maxIndex","indexRef","restPos","springs","set","useSprings","key","useEffect","offsetTop","offsetHeight","offsetLeft","offsetWidth","bind","useDrag","first","last","tap","swipe","movement","pressedIndex","memo","mov","swipeAxis","i","rootStyle","jsx","styles","createElement","animated","val","to","x","s","slides","Test","setIndex","useState","color","label","jsxs","Fragment","storyLink","__story","withCenteredStyle","withCustomTheme","withTopLabel","SoftSlider","_a"],"mappings":"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"}
{"version":3,"file":"_.story-3821e10c.js","sources":["../../src/components/gesture/ChainedGrid/data.ts","../../src/components/gesture/ChainedGrid/CrazyItem.tsx","../../src/components/gesture/ChainedGrid/Child.tsx","../../src/components/gesture/ChainedGrid/Item.tsx","../../src/components/gesture/ChainedGrid/ChainedGrid.tsx","../../src/components/gesture/ChainedGrid/_.story.tsx"],"sourcesContent":["export interface ItemModel {\r\n  name: string\r\n  description: string\r\n  css: string\r\n}\r\n\r\nexport const data: ItemModel[] = [\r\n  {\r\n    name: 'Rare Wind',\r\n    description: '#a8edea → #fed6e3',\r\n    css: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)',\r\n  },\r\n  {\r\n    name: 'Saint Petersburg',\r\n    description: '#f5f7fa → #c3cfe2',\r\n    css: 'linear-gradient(135deg, #c3cfe2 0%, #c3cfe2 100%)',\r\n  },\r\n  {\r\n    name: 'Deep Blue',\r\n    description: '#e0c3fc → #8ec5fc',\r\n    css: 'linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%)',\r\n  },\r\n  {\r\n    name: 'Ripe Malinka',\r\n    description: '#f093fb → #f5576c',\r\n    css: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',\r\n  },\r\n  {\r\n    name: 'Near Moon',\r\n    description: '#5ee7df → #b490ca',\r\n    css: 'linear-gradient(135deg, #5ee7df 0%, #b490ca 100%)',\r\n  },\r\n  {\r\n    name: 'Wild Apple',\r\n    description: '#d299c2 → #fef9d7',\r\n    css: 'linear-gradient(135deg, #d299c2 0%, #fef9d7 100%)',\r\n  },\r\n  {\r\n    name: 'Ladoga Bottom',\r\n    description: '#ebc0fd → #d9ded8',\r\n    css: 'linear-gradient(135deg, #ebc0fd 0%, #d9ded8 100%)',\r\n  },\r\n  {\r\n    name: 'Sunny Morning',\r\n    description: '#f6d365 → #fda085',\r\n    css: 'linear-gradient(120deg, #f6d365 0%, #fda085 100%)',\r\n  },\r\n  {\r\n    name: 'Lemon Gate',\r\n    description: '#96fbc4 → #f9f586',\r\n    css: 'linear-gradient(to top, #96fbc4 0%, #f9f586 100%)',\r\n  },\r\n]\r\n\r\nexport default data\r\n","import React, { useEffect, useRef, useState, memo } from 'react'\r\n\r\nimport { useSpring, animated, to } from '@react-spring/web'\r\nimport { useGesture } from '@use-gesture/react'\r\n\r\nimport clamp from '~/utils/clamp'\r\n\r\nimport classes from './_classes.css'\r\nimport { data } from './data'\r\n\r\nexport interface ItemProps {\r\n  index: number\r\n  step: number\r\n  max: number\r\n  position: [number, number]\r\n  active: boolean\r\n\r\n  onClick: (index: number) => void\r\n  onStart: () => void\r\n  updatePosition: (index: number, x: number, y: number) => void\r\n}\r\n\r\nconst updateAxis = (\r\n  val: number,\r\n  step: number,\r\n  current: number,\r\n  max: number\r\n) => {\r\n  const offset = val % step\r\n\r\n  const diff = (val - offset) / step\r\n\r\n  if (offset > step / 2) {\r\n    return clamp(current + diff + 1, 0, max)\r\n  } else if (offset < -step / 2) {\r\n    return clamp(current + diff - 1, 0, max)\r\n  }\r\n  return clamp(current + diff, 0, max)\r\n}\r\n\r\nconst setStable = (\r\n  x: number,\r\n  y: number,\r\n  max: number,\r\n  step: number,\r\n  active?: boolean\r\n) => ({\r\n  x: active ? 0 : x,\r\n  y: active ? 0 : y,\r\n  bottom: active ? 7 : max * step + 7,\r\n  right: active ? 7 : max * step + 7,\r\n  scalE: 1,\r\n  zIndeX: active ? 10 : 0,\r\n  shadow: 1,\r\n})\r\n\r\nconst setDragging = (x: number, y: number, max: number, step: number) => ({\r\n  x,\r\n  y,\r\n  bottom: max * step + 7,\r\n  right: max * step + 7,\r\n  scalE: 1.1,\r\n  zIndeX: 100,\r\n  shadow: 15,\r\n})\r\n\r\nexport const CrazyItem = memo((props: ItemProps) => {\r\n  const {\r\n    index,\r\n    step,\r\n    max,\r\n    position,\r\n    onStart,\r\n    updatePosition,\r\n    active,\r\n    onClick,\r\n  } = props\r\n\r\n  const isDragging = useRef(false)\r\n  const [oldPos, setOldPos] = useState([...position])\r\n\r\n  const [styles, spring] = useSpring(() =>\r\n    setStable(position[0] * step, position[1] * step, max, step)\r\n  )\r\n\r\n  const { x, y, bottom, right, scalE, zIndeX, shadow } = styles\r\n\r\n  useEffect(() => {\r\n    if (!isDragging.current) {\r\n      setOldPos([...position])\r\n      const newSpringValues = setStable(\r\n        position[0] * step,\r\n        position[1] * step,\r\n        max,\r\n        step,\r\n        active\r\n      )\r\n\r\n      spring.start(newSpringValues)\r\n    }\r\n  }, [position, spring, step, active, max])\r\n\r\n  const bind = useGesture(\r\n    {\r\n      onClick: () => void onClick(index),\r\n      onDragStart: () => {\r\n        isDragging.current = true\r\n        onStart()\r\n      },\r\n      onDragEnd: () => void (isDragging.current = false),\r\n      onDrag: ({ down, movement: [x, y] }) => {\r\n        const newX = updateAxis(x, step, oldPos[0], max)\r\n        const newY = updateAxis(y, step, oldPos[1], max)\r\n\r\n        if (down) {\r\n          const newSpringValues = setDragging(\r\n            oldPos[0] * step + x,\r\n            oldPos[1] * step + y,\r\n            max,\r\n            step\r\n          )\r\n\r\n          spring.start(newSpringValues)\r\n        } else {\r\n          setOldPos([newX, newY])\r\n\r\n          const newSpringValues = setStable(\r\n            newX * step,\r\n            newY * step,\r\n            max,\r\n            step,\r\n            active\r\n          )\r\n\r\n          spring.start(newSpringValues)\r\n        }\r\n\r\n        updatePosition(index, newX, newY)\r\n      },\r\n    },\r\n    { drag: { filterTaps: true } }\r\n  )\r\n\r\n  return (\r\n    <animated.div\r\n      {...bind()}\r\n      className={classes.item}\r\n      style={{\r\n        zIndex: zIndeX.to((val) => Number(val.toFixed(0))),\r\n        boxShadow: shadow.to(\r\n          (s) => `0px ${s}px ${2 * s}px 0px rgba(0, 0, 0, 0.3)`\r\n        ),\r\n        transform: to(\r\n          [y, x, scalE],\r\n          (y, x, scalE) => `translate3d(${x}px, ${y}px, 0) scale(${scalE})`\r\n        ),\r\n        width: 'auto',\r\n        height: 'auto',\r\n        bottom,\r\n        right,\r\n      }}\r\n    >\r\n      <div className={classes.side} style={{ background: data[index].css }}>\r\n        {data[index].name}\r\n      </div>\r\n    </animated.div>\r\n  )\r\n})\r\n","import { memo, useEffect } from 'react'\r\n\r\nimport { animated, to, useSpring } from '@react-spring/web'\r\n\r\nimport classes from './_classes.css'\r\nimport { data } from './data'\r\n\r\nexport interface ChildProps {\r\n  index: number\r\n  active: boolean\r\n}\r\n\r\nconst initial = { y: 0, z: 0 }\r\n\r\nexport const Child = memo((props: ChildProps) => {\r\n  const { index, active } = props\r\n\r\n  const [{ z, y }, spring] = useSpring(() => ({\r\n    from: initial,\r\n    to: initial,\r\n    config: (key) =>\r\n      key === 'y'\r\n        ? { tension: 120, friction: 14, clamp: false }\r\n        : { tension: 50, friction: 5, clamp: true },\r\n  }))\r\n\r\n  useEffect(() => {\r\n    if (active) {\r\n      spring.start({ to: [{ z: 0.5 }, { y: 1, z: 1 }] })\r\n      return\r\n    }\r\n\r\n    spring.start({ to: initial })\r\n  }, [active, spring])\r\n\r\n  const renderFront = () => (\r\n    <div className={classes.frontCard}>\r\n      <div className={classes.side} style={{ background: data[index].css }}>\r\n        {index}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  const renderBack = () => (\r\n    <div className={classes.backCard}>\r\n      <div className={classes.side} style={{ background: data[index].css }}>\r\n        {data[index].name}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <animated.div\r\n      className={classes.inner}\r\n      style={{\r\n        transform: to(\r\n          [y, z],\r\n          (y, z) => `rotateY(${180 * y}deg) scale(${1 + z})`\r\n        ),\r\n        boxShadow: z.to(\r\n          (z) => `0px ${15 * z}px ${30 * z}px 0px rgba(0, 0, 0, 0.7)`\r\n        ),\r\n      }}\r\n    >\r\n      {renderFront()}\r\n      {renderBack()}\r\n    </animated.div>\r\n  )\r\n})\r\n","import React, { useEffect, useRef, useState, memo } from 'react'\r\n\r\nimport { useSpring, animated, to } from '@react-spring/web'\r\nimport { useGesture } from '@use-gesture/react'\r\n\r\nimport clamp from '~/utils/clamp'\r\n\r\nimport classes from './_classes.css'\r\nimport { Child } from './Child'\r\n\r\nexport interface ItemProps {\r\n  index: number\r\n  step: number\r\n  max: number\r\n  position: [number, number]\r\n  active: boolean\r\n\r\n  onClick: (index: number) => void\r\n  onStart: () => void\r\n  updatePosition: (index: number, x: number, y: number) => void\r\n}\r\n\r\nconst updateAxis = (\r\n  val: number,\r\n  step: number,\r\n  current: number,\r\n  max: number\r\n) => {\r\n  const offset = val % step\r\n\r\n  const diff = (val - offset) / step\r\n\r\n  if (offset > step / 2) {\r\n    return clamp(current + diff + 1, 0, max)\r\n  } else if (offset < -step / 2) {\r\n    return clamp(current + diff - 1, 0, max)\r\n  }\r\n  return clamp(current + diff, 0, max)\r\n}\r\n\r\nconst setStable = (x: number, y: number, active?: boolean) => ({\r\n  x,\r\n  y,\r\n  scalE: 1,\r\n  zIndeX: active ? 10 : 0,\r\n  shadow: 1,\r\n})\r\n\r\nconst setDragging = (x: number, y: number) => ({\r\n  x,\r\n  y,\r\n  scalE: 1.1,\r\n  zIndeX: 100,\r\n  shadow: 15,\r\n})\r\n\r\nexport const Item = memo((props: ItemProps) => {\r\n  const {\r\n    index,\r\n    step,\r\n    max,\r\n    position,\r\n    onStart,\r\n    updatePosition,\r\n    active,\r\n    onClick,\r\n  } = props\r\n\r\n  const isDragging = useRef(false)\r\n  const [oldPos, setOldPos] = useState([...position])\r\n\r\n  const [{ x, y, scalE, zIndeX, shadow }, spring] = useSpring(() =>\r\n    setStable(position[0] * step, position[1] * step)\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!isDragging.current) {\r\n      setOldPos([...position])\r\n      spring.start(setStable(position[0] * step, position[1] * step, active))\r\n    }\r\n  }, [position, spring, step, active])\r\n\r\n  const bind = useGesture(\r\n    {\r\n      onClick: () => void onClick(index),\r\n      onDragStart: () => {\r\n        isDragging.current = true\r\n        onStart()\r\n      },\r\n      onDragEnd: () => {\r\n        isDragging.current = false\r\n      },\r\n      onDrag: ({ down, movement: [x, y] }) => {\r\n        const newX = updateAxis(x, step, oldPos[0], max)\r\n        const newY = updateAxis(y, step, oldPos[1], max)\r\n        if (down) {\r\n          spring.start(setDragging(oldPos[0] * step + x, oldPos[1] * step + y))\r\n        } else {\r\n          setOldPos([newX, newY])\r\n          spring.start(setStable(newX * step, newY * step, active))\r\n        }\r\n\r\n        updatePosition(index, newX, newY)\r\n      },\r\n    },\r\n    { drag: { filterTaps: true } }\r\n  )\r\n\r\n  return (\r\n    <animated.div\r\n      {...bind()}\r\n      className={classes.item}\r\n      style={{\r\n        touchAction: 'none',\r\n        zIndex: zIndeX.to((val) => Number(val.toFixed(0))),\r\n        boxShadow: shadow.to(\r\n          (s) => `0px ${s}px ${2 * s}px 0px rgba(0, 0, 0, 0.3)`\r\n        ),\r\n        transform: to(\r\n          [y, x, scalE],\r\n          (y, x, scalE) => `translate3d(${x}px, ${y}px, 0) scale(${scalE})`\r\n        ),\r\n      }}\r\n    >\r\n      <Child index={index} active={active} />\r\n    </animated.div>\r\n  )\r\n})\r\n","import { useState, useCallback, useMemo } from 'react'\r\n\r\nimport { produce } from 'immer'\r\n\r\nimport classes from './_classes.css'\r\nimport { CrazyItem } from './CrazyItem'\r\nimport { data } from './data'\r\nimport { Item } from './Item'\r\n\r\nconst MAGIC = 4\r\n\r\nconst arr: number[] = new Array(MAGIC * MAGIC).fill(-1)\r\n\r\ntype IState = Array<[number, number]>\r\n\r\nconst getPos = ([x, y]: [number, number]) => y * MAGIC + x\r\nconst getXY = (pos: number): [number, number] => [\r\n  pos % MAGIC,\r\n  Math.floor(pos / MAGIC),\r\n]\r\n\r\nconst indexedData = data.map((_, index) => getXY(index))\r\n\r\nexport interface ChainedGridProps {\r\n  isCrazy?: boolean\r\n}\r\n\r\nexport const ChainedGrid = ({ isCrazy }: ChainedGridProps) => {\r\n  const [items, setItems] = useState<IState>(indexedData)\r\n  const [active, set] = useState<number | null>(null)\r\n\r\n  const setActive = useCallback(\r\n    (index: number) => set((prev) => (prev === index ? null : index)),\r\n    []\r\n  )\r\n\r\n  const onStart = useCallback(() => set(null), [])\r\n\r\n  type Fun = (index: number, x: number, y: number) => void\r\n  const updateItemPosition = useCallback<Fun>((index, x, y) => {\r\n    setItems((state) =>\r\n      produce(state, (draft) => {\r\n        const oldPos = getPos(draft[index])\r\n        let newPos = getPos([x, y])\r\n\r\n        if (oldPos === newPos) {\r\n          return\r\n        }\r\n\r\n        const field = arr.slice()\r\n        state.forEach((item, index) => (field[getPos(item)] = index))\r\n\r\n        let first = true\r\n        let check = field[newPos] !== -1\r\n        while (check) {\r\n          if (first) {\r\n            first = false\r\n            const prevPos = newPos - 1 < 0 ? MAGIC * MAGIC - 1 : newPos - 1\r\n            check = field[prevPos] === -1 || prevPos === oldPos\r\n\r\n            if (check) {\r\n              draft[field[newPos]] = getXY(prevPos)\r\n              break\r\n            }\r\n          }\r\n\r\n          const nextPos = newPos + 1 > MAGIC * MAGIC - 1 ? 0 : newPos + 1\r\n          check = field[nextPos] !== -1 && nextPos !== oldPos\r\n          draft[field[newPos]] = getXY(nextPos)\r\n          newPos = nextPos\r\n        }\r\n\r\n        draft[index] = [x, y]\r\n      })\r\n    )\r\n  }, [])\r\n\r\n  const renderCells = () =>\r\n    arr.map((_, index) => <div key={index} className={classes.gridItem} />)\r\n\r\n  const Component = useMemo(() => (isCrazy ? CrazyItem : Item), [isCrazy])\r\n\r\n  const renderItems = () =>\r\n    items.map((item, index) => (\r\n      <Component\r\n        key={index}\r\n        index={index}\r\n        step={100}\r\n        max={MAGIC - 1}\r\n        position={item}\r\n        updatePosition={updateItemPosition}\r\n        onStart={onStart}\r\n        active={active === index}\r\n        onClick={setActive}\r\n      />\r\n    ))\r\n\r\n  return (\r\n    <div className={classes.grid}>\r\n      {renderCells()}\r\n      {renderItems()}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentMeta } from '@storybook/react';\nimport { withCenteredStyle } from '~/_storybook/withCenteredStyle';\nimport { withCustomTheme } from '~/_storybook/withCustomTheme';\nimport { ChainedGrid } from './ChainedGrid';\nexport default ({\n  title: 'Gesture/ChainedDnDGrid',\n  decorators: [withCenteredStyle({\n    width: '100vw',\n    height: '100vh',\n    display: 'grid',\n    placeItems: 'center',\n    overflow: 'hidden',\n    background: '#32394e'\n  }), withCustomTheme],\n  component: ChainedGrid\n} as ComponentMeta<typeof ChainedGrid>);\nexport const _ChainedGrid = () => <ChainedGrid />;\nexport const _HeroChainedGrid = () => <ChainedGrid isCrazy />;\n_ChainedGrid.parameters = {\n  ..._ChainedGrid.parameters,\n  storySource: {\n    source: \"() => <ChainedGrid />\",\n    ..._ChainedGrid.parameters?.storySource\n  }\n};\n_HeroChainedGrid.parameters = {\n  ..._HeroChainedGrid.parameters,\n  storySource: {\n    source: \"() => <ChainedGrid isCrazy />\",\n    ..._HeroChainedGrid.parameters?.storySource\n  }\n};"],"names":["data","updateAxis","val","step","current","max","offset","diff","clamp","setStable","x","y","active","setDragging","CrazyItem","memo","props","index","position","onStart","updatePosition","onClick","isDragging","useRef","oldPos","setOldPos","useState","styles","spring","useSpring","bottom","right","scalE","zIndeX","shadow","useEffect","newSpringValues","bind","useGesture","down","x2","y2","newX","newY","jsx","animated","classes","to","scalE2","initial","Child","z","key","renderFront","renderBack","jsxs","z2","Item","s","MAGIC","arr","getPos","getXY","pos","indexedData","_","ChainedGrid","isCrazy","items","setItems","set","setActive","useCallback","prev","updateItemPosition","state","produce","draft","newPos","field","item","index2","first","check","prevPos","nextPos","renderCells","Component","useMemo","renderItems","__story","withCenteredStyle","withCustomTheme","_ChainedGrid","_HeroChainedGrid","_a"],"mappings":"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"}
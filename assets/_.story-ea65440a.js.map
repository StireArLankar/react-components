{"version":3,"file":"_.story-ea65440a.js","sources":["../../src/components/spring/Button/helpers.ts","../../src/components/spring/Button/index.tsx","../../src/components/spring/Button/_.story.tsx"],"sourcesContent":["type GetTextWidth = { (text: string, font: string): number } & {\r\n  canvas?: HTMLCanvasElement\r\n}\r\n\r\nexport const getTextWidth: GetTextWidth = (text, font) => {\r\n  const canvas =\r\n    getTextWidth.canvas ||\r\n    (getTextWidth.canvas = document.createElement('canvas'))\r\n  const context = canvas.getContext('2d')\r\n\r\n  if (!context) {\r\n    return 0\r\n  }\r\n\r\n  context.font = font\r\n  const metrics = context.measureText(text)\r\n  return metrics.width\r\n}\r\n","import { memo, useRef, useState } from 'react'\r\n\r\nimport { animated, useSpringRef, useChain, useSpring } from '@react-spring/web'\r\n\r\nimport classes from './_classes.css'\r\nimport { getTextWidth } from './helpers'\r\n\r\ntype Variants = 'bold' | 'regular'\r\n\r\nexport type ResponsiveTextProps = {\r\n  text: string\r\n  variant?: Variants\r\n}\r\n\r\nconst variantToFont = (variant: Variants): string => {\r\n  switch (variant) {\r\n    case 'bold':\r\n      return 'bold 60px cursive'\r\n    case 'regular':\r\n      return '60px cursive'\r\n  }\r\n}\r\n\r\nconst variantToXPadding = (variant: Variants): number => {\r\n  switch (variant) {\r\n    case 'bold':\r\n      return 34\r\n    case 'regular':\r\n      return 24\r\n  }\r\n}\r\n\r\nconst variantToYHeight = (variant: Variants): number => {\r\n  switch (variant) {\r\n    case 'bold':\r\n      return 100\r\n    case 'regular':\r\n      return 84\r\n  }\r\n}\r\n\r\nexport default memo((props: ResponsiveTextProps) => {\r\n  const { text, variant = 'bold' } = props\r\n\r\n  const [state, setState] = useState(false)\r\n\r\n  const svgRef = useRef<SVGSVGElement>(null)\r\n\r\n  const ref1 = useSpringRef()\r\n  const ref2 = useSpringRef()\r\n  const ref3 = useSpringRef()\r\n\r\n  const temp1 = useSpring({\r\n    ref: ref1,\r\n    opacity: state ? 0 : 1,\r\n    from: { opacity: 1 },\r\n  })\r\n\r\n  const temp2 = useSpring({\r\n    opacity: state ? 0 : 1,\r\n    onChange: ({ opacity: val }: any) => {\r\n      const viewbox = `0 0 ${val * width + (1 - val) * y} ${y}`\r\n      svgRef.current?.setAttribute('viewBox', viewbox)\r\n    },\r\n    ref: ref2,\r\n  })\r\n\r\n  const temp3 = useSpring({\r\n    opacity: state ? 1 : 0,\r\n    from: { opacity: 0 },\r\n    ref: ref3,\r\n  })\r\n\r\n  useChain(\r\n    state ? [ref1, ref2, ref3] : [ref3, ref2, ref1],\r\n    state ? [0, 0.3, 0.8] : [0, 0.6, 1.3]\r\n  )\r\n\r\n  const font = variantToFont(variant)\r\n  const xpad = variantToXPadding(variant)\r\n  const y = variantToYHeight(variant)\r\n\r\n  const width = getTextWidth(text, font) + xpad * 2\r\n\r\n  return (\r\n    <animated.svg\r\n      onClick={() => setState((prev) => !prev)}\r\n      viewBox={temp2.opacity.to(\r\n        (val) => `0 0 ${val * width + (1 - val) * y} ${y}`\r\n      )}\r\n      ref={svgRef}\r\n      // viewBox={`0 0 ${width} ${y}`}\r\n      style={{\r\n        height: y * 2,\r\n        background: '#0162c8',\r\n        fill: 'white',\r\n      }}\r\n    >\r\n      <animated.rect\r\n        stroke='white'\r\n        strokeWidth='5'\r\n        x='5'\r\n        y='5'\r\n        fill='none'\r\n        width={temp2.opacity.to(\r\n          (val) => (width - 10) * val + (y - 10) * (1 - val)\r\n        )}\r\n        height={y - 10}\r\n        rx={temp2.opacity.to({\r\n          range: [0, 0.5, 1],\r\n          output: [y / 2, 10, 10],\r\n        })}\r\n        pathLength='10'\r\n        style={{\r\n          strokeDasharray: temp2.opacity.to({\r\n            range: [0, 1],\r\n            output: [10, 2.5],\r\n          }),\r\n          strokeDashoffset: temp2.opacity.to({\r\n            range: [0, 1],\r\n            output: [0, 3.1],\r\n          }),\r\n        }}\r\n      />\r\n      <animated.rect\r\n        stroke='white'\r\n        strokeWidth='8'\r\n        x={y / 4}\r\n        y={y / 4}\r\n        fill='none'\r\n        width={y / 2}\r\n        height={y / 2}\r\n        pathLength='100'\r\n        transform='scale(0.8)'\r\n        style={{\r\n          strokeDasharray: 100,\r\n          strokeDashoffset: temp3.opacity.to({\r\n            range: [0, 1],\r\n            output: [100, 0],\r\n          }),\r\n          transformOrigin: 'center',\r\n          strokeLinecap: 'round',\r\n          strokeLinejoin: 'round',\r\n        }}\r\n      />\r\n      <animated.text\r\n        x='50%'\r\n        y='50%'\r\n        textAnchor='middle'\r\n        dominantBaseline='central'\r\n        className={classes[variant]}\r\n        style={temp1}\r\n      >\r\n        {text}\r\n      </animated.text>\r\n    </animated.svg>\r\n  )\r\n})\r\n","import { ComponentStory } from '@storybook/react';\nimport { withCenteredStyle } from '~/_storybook/withCenteredStyle';\nimport { withCustomTheme } from '~/_storybook/withCustomTheme';\nimport Temp, { ResponsiveTextProps } from '.';\nexport default {\n  title: 'Spring/Button',\n  decorators: [withCustomTheme, withCenteredStyle({\n    width: '100%',\n    background: 'teal',\n    minHeight: `100vh`,\n    display: 'grid',\n    placeItems: 'center'\n  })]\n};\nconst Test = ({\n  width,\n  ...props\n}: ResponsiveTextProps & {\n  width: number;\n}) => <div style={{\n  width,\n  background: 'red',\n  display: 'flex',\n  justifyContent: 'center'\n}}>\r\n    <Temp {...props} />\r\n  </div>;\nconst Template1: ComponentStory<typeof Test> = props => <Test {...props} />;\nexport const Button = Template1.bind({});\nButton.args = {\n  width: 400,\n  text: 'Hello world'\n};\nButton.parameters = {\n  ...Button.parameters,\n  storySource: {\n    source: \"props => <Test {...props} />\",\n    ...Button.parameters?.storySource\n  }\n};"],"names":["getTextWidth","text","font","context","variantToFont","variant","variantToXPadding","variantToYHeight","Temp","memo","props","state","setState","useState","svgRef","useRef","ref1","useSpringRef","ref2","ref3","temp1","useSpring","temp2","val","viewbox","width","y","_a","temp3","useChain","xpad","jsxs","animated","prev","jsx","classes","__story","withCustomTheme","withCenteredStyle","Test","Template1","Button"],"mappings":"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"}
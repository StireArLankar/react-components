{"version":3,"file":"_.story-3b99728c.js","sources":["../../src/components/gesture/BoxSlider/imgs.ts","../../src/components/gesture/BoxSlider/index.tsx","../../src/components/gesture/BoxSlider/Half.tsx","../../src/components/gesture/BoxSlider/Quarter.tsx","../../src/components/gesture/BoxSlider/BoxSliderAutoplay.tsx","../../src/components/gesture/BoxSlider/QuarterAutoplay.tsx","../../src/components/gesture/BoxSlider/BoxSliderInertial.tsx","../../src/components/gesture/BoxSlider/QuarterInertial.tsx","../../src/components/gesture/BoxSlider/BoxSliderSnap.tsx","../../src/components/gesture/BoxSlider/QuarterSnap.tsx","../../src/components/gesture/BoxSlider/_.story.tsx"],"sourcesContent":["export default [\r\n  'https://drscdn.500px.org/photo/126979479/w%3D440_h%3D440/v2?webp=true&v=2&sig=09ea71b0ddb91e24a59cecfb79a0189a2ab575d10372d3e8d3258e38f97a6a49',\r\n  'https://drscdn.500px.org/photo/435236/q%3D80_m%3D1500/v2?webp=true&sig=67031bdff6f582f3e027311e2074be452203ab637c0bd21d89128844becf8e40',\r\n  'https://drscdn.500px.org/photo/188823103/w%3D440_h%3D440/v2?webp=true&v=3&sig=af23265ed9beaeeeb12b4f8dfed14dd613e5139495ba4a80d5dcad5cef9e39fd',\r\n  'https://drscdn.500px.org/photo/216094471/w%3D440_h%3D440/v2?webp=true&v=0&sig=16a2312302488ae2ce492fb015677ce672fcecac2befcb8d8e9944cbbfa1b53a',\r\n  'https://drscdn.500px.org/photo/227760547/w%3D440_h%3D440/v2?webp=true&v=0&sig=d00bd3de4cdc411116f82bcc4a4e8a6375ed90a686df8488088bca4b02188c73',\r\n]\r\n","import { animated, useSpring } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport classes from './_classes.css'\r\nimport { BoxSliderProps } from './_types'\r\nimport imgs from './imgs'\r\n\r\nexport const BoxSlider = (props: BoxSliderProps) => {\r\n  const { rotate, int } = props\r\n\r\n  const [{ x }, spring] = useSpring(() => ({ x: 0 }))\r\n\r\n  useDrag(({ offset: [x] }) => void spring.start({ x }), { target: window })\r\n\r\n  const renderImages = () =>\r\n    imgs.map((img, index) => (\r\n      <animated.li\r\n        key={index}\r\n        className={classes.container}\r\n        style={{\r\n          transform: x.to((val) => rotate(int(val, imgs.length, index))),\r\n        }}\r\n      >\r\n        <animated.div\r\n          className={classes.img}\r\n          style={{ backgroundImage: `url(${img})` }}\r\n        />\r\n      </animated.li>\r\n    ))\r\n\r\n  const renderValues = () =>\r\n    imgs.map((_, index) => (\r\n      <animated.p className={classes.value}>\r\n        {x.to((val) => int(val, imgs.length, index).toFixed(0))}\r\n      </animated.p>\r\n    ))\r\n\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <ul className={classes.stage}>{renderImages()}</ul>\r\n      <ul className={classes.values}>{renderValues()}</ul>\r\n    </div>\r\n  )\r\n}\r\n","import clamp from '~/utils/clamp'\r\n\r\nimport { BoxSlider } from '.'\r\n\r\nconst STEP = 100\r\n\r\nconst rotate = (num: number) =>\r\n  `translateZ(-200px) rotateY(${-90 + (num * 180) / STEP}deg )`\r\n\r\nconst int = (x: number, count: number, i: number) => {\r\n  // Range of possible values\r\n  // [0...max]\r\n  const fullRange = STEP * count\r\n\r\n  // Current x value bounded by full cycle\r\n  // [0...val...max] or [-max...val...0]\r\n  const boundedValue = x % fullRange\r\n\r\n  // Needed for transforming negative value to positive\r\n  // [-max...val...0] => [0...val...max]\r\n  const offset = boundedValue > 0 ? 0 : fullRange\r\n  const positiveValue = boundedValue + offset\r\n\r\n  // Value normilized to [0...val...STEP] for each item\r\n  const itemValue = positiveValue - STEP * i\r\n\r\n  return clamp(itemValue, 0, STEP)\r\n}\r\n\r\nexport const HalfSlider = () => <BoxSlider rotate={rotate} int={int} step={0} />\r\n","import clamp from '~/utils/clamp'\r\n\r\nimport { BoxSlider } from '.'\r\n\r\nconst STEP = 100\r\n\r\n// range: [-50, 150]\r\nconst rotate = (num: number) =>\r\n  `translateZ(-200px) rotateY(${-45 + (num * 90) / STEP}deg )`\r\n\r\nconst int = (x: number, count: number, i: number) => {\r\n  // Range of possible values\r\n  // [0...max]\r\n  const fullRange = STEP * count\r\n\r\n  // Current x value bounded by full cycle\r\n  // [0...val...max] or [-max...val...0]\r\n  const boundedValue = x % fullRange\r\n\r\n  // Needed for transforming negative value to positive\r\n  // [-max...val...0] => [0...val...max]\r\n  const offset = boundedValue > 0 ? 0 : fullRange\r\n  const positiveValue = boundedValue + offset\r\n\r\n  // Value normilized to [0...val...STEP] for each item\r\n  const itemValue = positiveValue - STEP * i\r\n\r\n  if (i === 0 && positiveValue > fullRange - STEP / 2) {\r\n    // Make first item move like he is startig from STEP * -1/2 on big values\r\n    return positiveValue - fullRange\r\n  }\r\n\r\n  if (i === count - 1 && positiveValue < STEP / 2) {\r\n    // Make last item move like he is startig from STEP * 3/2 on low values\r\n    return positiveValue + STEP\r\n  }\r\n\r\n  return clamp(itemValue, STEP * (-1 / 2), STEP * (3 / 2))\r\n}\r\n\r\nexport const QuarterSlider = () => (\r\n  <BoxSlider step={STEP} rotate={rotate} int={int} />\r\n)\r\n","import { useEffect, useRef, useState } from 'react'\r\n\r\nimport { animated, useSpring } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport classes from './_classes.css'\r\nimport { BoxSliderProps } from './_types'\r\nimport imgs from './imgs'\r\n\r\nconst updateValue = (x: number, step: number, current: number) => {\r\n  const offset = x % step\r\n  if (offset > step / 2) {\r\n    return current + x - offset + step\r\n  } else if (offset < -step / 2) {\r\n    return current + x - offset - step\r\n  }\r\n  return current + x - offset\r\n}\r\n\r\nexport const BoxSliderAutoplay = (props: BoxSliderProps) => {\r\n  const { rotate, int, step, start = 0 } = props\r\n\r\n  const isAnimatingRef = useRef(false)\r\n\r\n  const [{ x }, spring] = useSpring(() => ({\r\n    x: start,\r\n    onStart: () => (isAnimatingRef.current = true),\r\n    onRest: () => (isAnimatingRef.current = false),\r\n  }))\r\n\r\n  const [isDragging, setIsDragging] = useState(false)\r\n  const [offset, setOffset] = useState(start)\r\n\r\n  useDrag(\r\n    ({ movement: [x], down }) => {\r\n      if (down) {\r\n        setIsDragging(true)\r\n        spring.start({ x: offset + x })\r\n      } else {\r\n        setIsDragging(false)\r\n        setOffset((prev) => updateValue(x, step, prev))\r\n      }\r\n    },\r\n    { target: window, filterTaps: true }\r\n  )\r\n\r\n  useEffect(() => {\r\n    spring.start({ x: offset })\r\n  }, [offset, spring, isDragging])\r\n\r\n  useEffect(() => {\r\n    let timer: NodeJS.Timer\r\n    if (!isDragging) {\r\n      const timerHandler = () => {\r\n        !isAnimatingRef.current && setOffset((prev) => prev - step)\r\n\r\n        timer = setTimeout(timerHandler, 5000)\r\n      }\r\n\r\n      timer = setTimeout(timerHandler, 5000)\r\n    }\r\n    return () => clearTimeout(timer)\r\n  }, [step, isDragging])\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => (isAnimatingRef.current = false), 100)\r\n  }, [])\r\n\r\n  const renderImages = () =>\r\n    imgs.map((img, index) => (\r\n      <animated.li\r\n        key={index}\r\n        className={classes.container}\r\n        style={{\r\n          transform: x.to((val) => rotate(int(val, imgs.length, index))),\r\n        }}\r\n      >\r\n        <animated.div\r\n          className={classes.img}\r\n          style={{ backgroundImage: `url(${img})` }}\r\n        />\r\n      </animated.li>\r\n    ))\r\n\r\n  const renderValues = () =>\r\n    imgs.map((_, index) => (\r\n      <animated.p className={classes.value}>\r\n        {x.to((val) => int(val, imgs.length, index).toFixed(0))}\r\n      </animated.p>\r\n    ))\r\n\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <ul className={classes.stage}>{renderImages()}</ul>\r\n      <ul className={classes.values}>{renderValues()}</ul>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport clamp from '~/utils/clamp'\r\n\r\nimport { BoxSliderAutoplay } from './BoxSliderAutoplay'\r\n\r\nconst STEP = 100\r\n\r\n// range: [-50, 150]\r\nconst rotate = (num: number) =>\r\n  `translateZ(-200px) rotateY(${-45 + (num * 90) / STEP}deg )`\r\n\r\nconst int = (x: number, count: number, i: number) => {\r\n  // Range of possible values\r\n  // [0...max]\r\n  const fullRange = STEP * count\r\n\r\n  // Current x value bounded by full cycle\r\n  // [0...val...max] or [-max...val...0]\r\n  const boundedValue = x % fullRange\r\n\r\n  // Needed for transforming negative value to positive\r\n  // [-max...val...0] => [0...val...max]\r\n  const offset = boundedValue > 0 ? 0 : fullRange\r\n  const positiveValue = boundedValue + offset\r\n\r\n  // Value normilized to [0...val...STEP] for each item\r\n  const itemValue = positiveValue - STEP * i\r\n\r\n  if (i === 0 && positiveValue > fullRange - STEP / 2) {\r\n    // Make first item move like he is startig from STEP * -1/2 on big values\r\n    return positiveValue - fullRange\r\n  }\r\n\r\n  if (i === count - 1 && positiveValue < STEP / 2) {\r\n    // Make last item move like he is startig from STEP * 3/2 on low values\r\n    return positiveValue + STEP\r\n  }\r\n\r\n  return clamp(itemValue, STEP * (-1 / 2), STEP * (3 / 2))\r\n}\r\n\r\nexport const QuarterAutoplaySlider = () => (\r\n  <BoxSliderAutoplay step={STEP} rotate={rotate} int={int} start={50} />\r\n)\r\n","import { useRef } from 'react'\r\n\r\nimport { animated, useSpring } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport classes from './_classes.css'\r\nimport { BoxSliderProps } from './_types'\r\nimport imgs from './imgs'\r\n\r\nexport const BoxSliderInertial = (props: BoxSliderProps) => {\r\n  const { rotate, int, start = 0 } = props\r\n\r\n  const [{ x }, spring] = useSpring(() => ({\r\n    x: start,\r\n    config: { mass: 5, tension: 170, friction: 80 },\r\n  }))\r\n\r\n  // Ref for memoizing value between drags\r\n  const dragOffset = useRef(start)\r\n\r\n  useDrag(\r\n    ({ movement: [x], down, velocity: [vx], direction: [dx] }) => {\r\n      if (down) {\r\n        spring.start({ x: dragOffset.current + x })\r\n      } else {\r\n        dragOffset.current += x + vx * dx * 200\r\n        spring.start({ x: dragOffset.current })\r\n      }\r\n    },\r\n    { target: window }\r\n  )\r\n\r\n  const renderImages = () =>\r\n    imgs.map((img, index) => (\r\n      <animated.li\r\n        key={index}\r\n        className={classes.container}\r\n        style={{\r\n          transform: x.to((val) => rotate(int(val, imgs.length, index))),\r\n        }}\r\n      >\r\n        <animated.div\r\n          className={classes.img}\r\n          style={{ backgroundImage: `url(${img})` }}\r\n        />\r\n      </animated.li>\r\n    ))\r\n\r\n  const renderValues = () =>\r\n    imgs.map((_, index) => (\r\n      <animated.p className={classes.value} key={index}>\r\n        {x.to((val) => int(val, imgs.length, index).toFixed(0))}\r\n      </animated.p>\r\n    ))\r\n\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <ul className={classes.stage}>{renderImages()}</ul>\r\n      <ul className={classes.values}>{renderValues()}</ul>\r\n    </div>\r\n  )\r\n}\r\n","import clamp from '~/utils/clamp'\r\n\r\nimport { BoxSliderInertial } from './BoxSliderInertial'\r\n\r\nconst STEP = 100\r\n\r\n// range: [-50, 150]\r\nconst rotate = (num: number) =>\r\n  `translateZ(-200px) rotateY(${-45 + (num * 90) / STEP}deg )`\r\n\r\nconst int = (x: number, count: number, i: number) => {\r\n  // Range of possible values\r\n  // [0...max]\r\n  const fullRange = STEP * count\r\n\r\n  // Current x value bounded by full cycle\r\n  // [0...val...max] or [-max...val...0]\r\n  const boundedValue = x % fullRange\r\n\r\n  // Needed for transforming negative value to positive\r\n  // [-max...val...0] => [0...val...max]\r\n  const offset = boundedValue > 0 ? 0 : fullRange\r\n  const positiveValue = boundedValue + offset\r\n\r\n  // Value normilized to [0...val...STEP] for each item\r\n  const itemValue = positiveValue - STEP * i\r\n\r\n  if (i === 0 && positiveValue > fullRange - STEP / 2) {\r\n    // Make first item move like he is startig from STEP * -1/2 on big values\r\n    return positiveValue - fullRange\r\n  }\r\n\r\n  if (i === count - 1 && positiveValue < STEP / 2) {\r\n    // Make last item move like he is startig from STEP * 3/2 on low values\r\n    return positiveValue + STEP\r\n  }\r\n\r\n  return clamp(itemValue, STEP * (-1 / 2), STEP * (3 / 2))\r\n}\r\n\r\nexport const QuarterInertialSlider = () => (\r\n  <BoxSliderInertial step={STEP} rotate={rotate} int={int} start={50} />\r\n)\r\n","import { useRef } from 'react'\r\n\r\nimport { animated, useSpring } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport classes from './_classes.css'\r\nimport { BoxSliderProps } from './_types'\r\nimport imgs from './imgs'\r\n\r\nexport const BoxSliderSnap = (props: BoxSliderProps) => {\r\n  const { rotate, int, step, start = 0 } = props\r\n\r\n  const [{ x }, spring] = useSpring(() => ({ x: start }))\r\n\r\n  // Ref for memoizing value between drags\r\n  const dragOffset = useRef(start)\r\n\r\n  useDrag(\r\n    ({ movement: [x], down }) => {\r\n      if (down) {\r\n        spring.start({ x: dragOffset.current + x })\r\n        return\r\n      }\r\n\r\n      const offset = x % step\r\n\r\n      if (offset > step / 2) {\r\n        // If remainder is more than half step,\r\n        // then substract remainder and add step (rotate to next item)\r\n        dragOffset.current += x - offset + step\r\n      } else if (offset < -step / 2) {\r\n        // If abs of remainder is more than half step and\r\n        // its sign is negative, then substract remainder and\r\n        // remove step (rotate to previous item)\r\n        dragOffset.current += x - offset - step\r\n      } else {\r\n        // Else stay in current state (as its more valuable)\r\n        // thru substracting remainder\r\n        dragOffset.current += x - offset\r\n      }\r\n\r\n      spring.start({ x: dragOffset.current })\r\n    },\r\n    { target: window }\r\n  )\r\n\r\n  const renderImages = () =>\r\n    imgs.map((img, index) => (\r\n      <animated.li\r\n        key={index}\r\n        className={classes.container}\r\n        style={{\r\n          transform: x.to((val) => rotate(int(val, imgs.length, index))),\r\n        }}\r\n      >\r\n        <animated.div\r\n          className={classes.img}\r\n          style={{ backgroundImage: `url(${img})` }}\r\n        />\r\n      </animated.li>\r\n    ))\r\n\r\n  const renderValues = () =>\r\n    imgs.map((_, index) => (\r\n      <animated.p className={classes.value} key={index}>\r\n        {x.to((val) => int(val, imgs.length, index).toFixed(0))}\r\n      </animated.p>\r\n    ))\r\n\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <ul className={classes.stage}>{renderImages()}</ul>\r\n      <ul className={classes.values}>{renderValues()}</ul>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport clamp from '~/utils/clamp'\r\n\r\nimport { BoxSliderSnap } from './BoxSliderSnap'\r\n\r\nconst STEP = 100\r\n\r\n// range: [-50, 150]\r\nconst rotate = (num: number) =>\r\n  `translateZ(-200px) rotateY(${-45 + (num * 90) / STEP}deg )`\r\n\r\nconst int = (x: number, count: number, i: number) => {\r\n  // Range of possible values\r\n  // [0...max]\r\n  const fullRange = STEP * count\r\n\r\n  // Current x value bounded by full cycle\r\n  // [0...val...max] or [-max...val...0]\r\n  const boundedValue = x % fullRange\r\n\r\n  // Needed for transforming negative value to positive\r\n  // [-max...val...0] => [0...val...max]\r\n  const offset = boundedValue > 0 ? 0 : fullRange\r\n  const positiveValue = boundedValue + offset\r\n\r\n  // Value normilized to [0...val...STEP] for each item\r\n  const itemValue = positiveValue - STEP * i\r\n\r\n  if (i === 0 && positiveValue > fullRange - STEP / 2) {\r\n    // Make first item move like he is startig from STEP * -1/2 on big values\r\n    return positiveValue - fullRange\r\n  }\r\n\r\n  if (i === count - 1 && positiveValue < STEP / 2) {\r\n    // Make last item move like he is startig from STEP * 3/2 on low values\r\n    return positiveValue + STEP\r\n  }\r\n\r\n  return clamp(itemValue, STEP * (-1 / 2), STEP * (3 / 2))\r\n}\r\n\r\nexport const QuarterSnapSlider = () => (\r\n  <BoxSliderSnap step={STEP} rotate={rotate} int={int} start={50} />\r\n)\r\n","import { withCenteredStyle } from '~/_storybook/withCenteredStyle';\nimport { withCustomTheme } from '~/_storybook/withCustomTheme';\nimport { HalfSlider } from './Half';\nimport { QuarterSlider } from './Quarter';\nimport { QuarterAutoplaySlider } from './QuarterAutoplay';\nimport { QuarterInertialSlider } from './QuarterInertial';\nimport { QuarterSnapSlider } from './QuarterSnap';\nexport default {\n  title: 'Gesture/BoxSlider',\n  decorators: [withCenteredStyle({\n    width: '100%'\n  }), withCustomTheme]\n};\nexport const _HalfSlider = () => <HalfSlider />;\nexport const _QuarterSlider = () => <QuarterSlider />;\nexport const _QuarterSnapSlider = () => <QuarterSnapSlider />;\nexport const _QuarterInertialSlider = () => <QuarterInertialSlider />;\nexport const _QuarterAutoplaySlider = () => <QuarterAutoplaySlider />;\n_HalfSlider.parameters = {\n  ..._HalfSlider.parameters,\n  storySource: {\n    source: \"() => <HalfSlider />\",\n    ..._HalfSlider.parameters?.storySource\n  }\n};\n_QuarterSlider.parameters = {\n  ..._QuarterSlider.parameters,\n  storySource: {\n    source: \"() => <QuarterSlider />\",\n    ..._QuarterSlider.parameters?.storySource\n  }\n};\n_QuarterSnapSlider.parameters = {\n  ..._QuarterSnapSlider.parameters,\n  storySource: {\n    source: \"() => <QuarterSnapSlider />\",\n    ..._QuarterSnapSlider.parameters?.storySource\n  }\n};\n_QuarterInertialSlider.parameters = {\n  ..._QuarterInertialSlider.parameters,\n  storySource: {\n    source: \"() => <QuarterInertialSlider />\",\n    ..._QuarterInertialSlider.parameters?.storySource\n  }\n};\n_QuarterAutoplaySlider.parameters = {\n  ..._QuarterAutoplaySlider.parameters,\n  storySource: {\n    source: \"() => <QuarterAutoplaySlider />\",\n    ..._QuarterAutoplaySlider.parameters?.storySource\n  }\n};"],"names":["imgs","BoxSlider","props","rotate","int","x","spring","useSpring","useDrag","x2","renderImages","img","index","jsx","animated","classes","val","renderValues","_","jsxs","STEP","num","count","i","fullRange","boundedValue","offset","itemValue","clamp","HalfSlider","positiveValue","QuarterSlider","updateValue","step","current","BoxSliderAutoplay","start","isAnimatingRef","useRef","isDragging","setIsDragging","useState","setOffset","down","prev","useEffect","timer","timerHandler","QuarterAutoplaySlider","BoxSliderInertial","dragOffset","vx","dx","QuarterInertialSlider","BoxSliderSnap","QuarterSnapSlider","__story","withCenteredStyle","withCustomTheme","_HalfSlider","_QuarterSlider","_QuarterSnapSlider","_QuarterInertialSlider","_QuarterAutoplaySlider","_a"],"mappings":"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"}
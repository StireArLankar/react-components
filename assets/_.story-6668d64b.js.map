{"version":3,"file":"_.story-6668d64b.js","sources":["../../src/components/gesture/AutoSlider/Control.tsx","../../src/components/gesture/AutoSlider/AutoSlider.tsx","../../src/components/gesture/AutoSlider/ListSlider.tsx","../../src/components/gesture/AutoSlider/_.story.tsx"],"sourcesContent":["import { animated, useSpring } from '@react-spring/web'\r\n\r\nimport classes from './_classes.css'\r\n\r\ntype ControlProps = {\r\n  progress: number\r\n}\r\n\r\nexport const Control = ({ progress }: ControlProps) => {\r\n  const { x } = useSpring({ x: isNaN(progress) ? 0 : progress })\r\n\r\n  return (\r\n    <div className={classes.controls}>\r\n      <animated.div\r\n        className={classes.fill}\r\n        style={{ transform: x.to((val) => `scaleX(${val})`) }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React, {\r\n  useEffect,\r\n  useRef,\r\n  PropsWithChildren,\r\n  useState,\r\n  useMemo,\r\n  useCallback,\r\n} from 'react'\r\nimport useMeasure from 'react-use-measure'\r\n\r\nimport { animated, useSpring } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport classes from './_classes.css'\r\nimport { Control } from './Control'\r\n\r\nexport type SliderProps = {\r\n  interval?: number\r\n}\r\n\r\nconst trans = (val: number) => `translate3d(${val}px, 0, 0)`\r\n\r\nconst int = (x: number, count: number, i: number, step: number) => {\r\n  const fullRange = step * count\r\n\r\n  const boundedValue = x % fullRange\r\n\r\n  const offset = boundedValue > 0 ? 0 : fullRange\r\n  const positiveValue = boundedValue + offset\r\n\r\n  const itemValue = positiveValue - step * i\r\n\r\n  if (i === 0 && positiveValue > fullRange - step) {\r\n    return positiveValue - fullRange\r\n  }\r\n\r\n  return Math.min(Math.max(itemValue, step * -1), step * 2)\r\n}\r\n\r\nconst updateCurrentIndex = (val: number, step: number, current: number) => {\r\n  const offset = val % step\r\n\r\n  const diff = (val - offset) / step\r\n\r\n  if (offset > step / 2) {\r\n    return current + diff + 1\r\n  } else if (offset < -step / 2) {\r\n    return current + diff - 1\r\n  }\r\n\r\n  return current + diff\r\n}\r\n\r\nconst getProgress = (selected: number, length: number) => {\r\n  const rest = selected % length\r\n\r\n  return rest < 0 ? -rest / length : (length - rest) / length\r\n}\r\n\r\nexport const AutoSlider = (props: PropsWithChildren<SliderProps>) => {\r\n  const { children, interval = 4000 } = props\r\n\r\n  const [isHovered, setIsHovered] = useState(false)\r\n\r\n  const length = useMemo(() => React.Children.count(children), [children])\r\n\r\n  const onMouseEnter = () => setIsHovered(true)\r\n  const onMouseLeave = () => setIsHovered(false)\r\n\r\n  const [isDragging, setIsDragging] = useState(false)\r\n\r\n  const isAnimating = useRef(false)\r\n\r\n  const [ref, { width }] = useMeasure({ debounce: 100 })\r\n\r\n  const [selected, setSelected] = useState(0)\r\n\r\n  const [{ x }, spring] = useSpring(() => ({\r\n    x: 0,\r\n    onStart: () => {\r\n      isAnimating.current = true\r\n    },\r\n    onRest: () => setSelected(recalcIndex),\r\n    immediate: false,\r\n  }))\r\n\r\n  type A = (n: number) => number\r\n  const recalcIndex: A = useCallback(\r\n    (p) => {\r\n      isAnimating.current = false\r\n\r\n      if (Math.abs(p) > length) {\r\n        const res = p < 0 ? ((p % length) + length) % length : p % length\r\n        spring.start({ x: width * res, immediate: true })\r\n        return res\r\n      }\r\n\r\n      return p\r\n    },\r\n    [length, spring, width]\r\n  )\r\n\r\n  const bind = useDrag(({ movement: [x], down, cancel }) => {\r\n    // If 0 or 1 slide, then dont allow to drag\r\n    if (length < 2) {\r\n      cancel && cancel()\r\n      return\r\n    }\r\n\r\n    if (down) {\r\n      setIsDragging(true)\r\n      spring.start({ x: selected * width + x * 2 })\r\n    } else {\r\n      setIsDragging(false)\r\n      setSelected((prev) => updateCurrentIndex(x * 2, width, prev))\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    console.log({ selected })\r\n    spring.start({\r\n      x: width * selected,\r\n      immediate: false,\r\n      onRest: () => setSelected(recalcIndex),\r\n    })\r\n  }, [width, spring, selected, isDragging, recalcIndex])\r\n\r\n  useEffect(() => {\r\n    // If cursor is inside of slider, user is  dragging slider or slides amount <= 1,\r\n    // then return\r\n    if (isHovered || isDragging || length <= 1) {\r\n      return\r\n    }\r\n\r\n    let timer: ReturnType<typeof setTimeout>\r\n\r\n    // If cursor is outside of slider, user is not dragging slider and slides amount > 1,\r\n    // then start timer\r\n    const handler = () => {\r\n      if (!isAnimating.current) {\r\n        setSelected((prev) => prev - 1)\r\n      }\r\n\r\n      timer = setTimeout(handler, interval)\r\n    }\r\n\r\n    timer = setTimeout(handler, interval)\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [isHovered, isDragging, interval, length])\r\n\r\n  const renderItems = () =>\r\n    React.Children.map(children, (child, i) => (\r\n      <animated.li\r\n        className={classes.item}\r\n        style={{\r\n          transform: x.to((val) => trans(int(val, length, i, width))),\r\n        }}\r\n      >\r\n        {child}\r\n      </animated.li>\r\n    ))\r\n\r\n  return (\r\n    <div\r\n      className={classes.wrapper}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseLeave={onMouseLeave}\r\n      ref={ref}\r\n    >\r\n      <ul className={classes.slides} {...bind()}>\r\n        {renderItems()}\r\n      </ul>\r\n\r\n      <Control progress={getProgress(selected, length)} />\r\n    </div>\r\n  )\r\n}\r\n","import React, {\r\n  useEffect,\r\n  useRef,\r\n  PropsWithChildren,\r\n  useState,\r\n  useMemo,\r\n} from 'react'\r\nimport useMeasure from 'react-use-measure'\r\n\r\nimport { animated, useSpring } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport classes from './_classes.css'\r\nimport { Control } from './Control'\r\n\r\nexport type SliderProps = {\r\n  interval?: number\r\n}\r\n\r\nconst trans = (number: number) => `translate3d(-${number * 100}%, 0, 0)`\r\n\r\nconst int = (x: number, count: number) => {\r\n  const boundedValue = x % count\r\n\r\n  const offset = boundedValue > 0 ? 0 : count\r\n  const positiveValue = boundedValue + offset\r\n\r\n  return count - Math.min(positiveValue, count)\r\n}\r\n\r\nconst updateCurrentIndex = (x: number, width: number, current: number) => {\r\n  const offset = x % width\r\n\r\n  const diff = (x - offset) / width\r\n\r\n  if (offset > width / 2) {\r\n    return current + diff + 1\r\n  } else if (offset < -width / 2) {\r\n    return current + diff - 1\r\n  }\r\n\r\n  return current + diff\r\n}\r\n\r\nconst getProgress = (selected: number, length: number) => {\r\n  const rest = selected % length\r\n\r\n  return rest < 0 ? -rest / length : (length - rest) / length\r\n}\r\n\r\nexport const ListSlider = (props: PropsWithChildren<SliderProps>) => {\r\n  const { children, interval = 4000 } = props\r\n\r\n  const [isHovered, setIsHovered] = useState(false)\r\n\r\n  const length = useMemo(() => React.Children.count(children), [children])\r\n\r\n  const onMouseEnter = () => setIsHovered(true)\r\n  const onMouseLeave = () => setIsHovered(false)\r\n\r\n  const [isDragging, setIsDragging] = useState(false)\r\n\r\n  const isAnimating = useRef(false)\r\n\r\n  const [ref, { width }] = useMeasure()\r\n\r\n  const [selected, setSelected] = useState(0)\r\n\r\n  const [{ x }, spring] = useSpring(() => ({\r\n    x: 0,\r\n    onStart: () => {\r\n      isAnimating.current = true\r\n    },\r\n    onRest: () => {\r\n      isAnimating.current = false\r\n    },\r\n  }))\r\n\r\n  const bind = useDrag(({ movement: [x], down, cancel }) => {\r\n    if (length < 2) {\r\n      cancel && cancel()\r\n      return\r\n    }\r\n\r\n    if (down) {\r\n      setIsDragging(true)\r\n      spring.start({ x: selected + (x * 2) / width })\r\n    } else {\r\n      setIsDragging(false)\r\n      setSelected((prev) => updateCurrentIndex(x * 2, width, prev))\r\n    }\r\n  })\r\n\r\n  useEffect(\r\n    () => void spring.start({ x: selected }),\r\n    [spring, selected, isDragging]\r\n  )\r\n\r\n  useEffect(() => {\r\n    let timer: NodeJS.Timeout\r\n\r\n    if (!isHovered && !isDragging && length > 1) {\r\n      const handler = () => {\r\n        if (!isAnimating.current) {\r\n          setSelected((prev) => prev - 1)\r\n        }\r\n\r\n        timer = setTimeout(handler, interval)\r\n      }\r\n\r\n      timer = setTimeout(handler, interval)\r\n    }\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [isHovered, isDragging, interval, length])\r\n\r\n  const renderItems = () =>\r\n    React.Children.map(children, (child, i) => (\r\n      <li className={classes.item2} key={i}>\r\n        {child}\r\n      </li>\r\n    ))\r\n\r\n  return (\r\n    <div\r\n      className={classes.wrapper}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseLeave={onMouseLeave}\r\n      ref={ref}\r\n    >\r\n      <animated.ul\r\n        className={classes.slides}\r\n        {...bind()}\r\n        style={{\r\n          transform: x.to((val) => trans(int(val, length))),\r\n          overflow: 'unset',\r\n        }}\r\n      >\r\n        {length > 1 && renderItems()}\r\n        <li className={classes.item2}>{React.Children.toArray(children)[0]}</li>\r\n      </animated.ul>\r\n\r\n      <Control progress={getProgress(selected, length)} />\r\n    </div>\r\n  )\r\n}\r\n","import { Meta, StoryObj } from '@storybook/react';\nimport { withCenteredStyle } from '~/_storybook/withCenteredStyle';\nimport { withCustomTheme } from '~/_storybook/withCustomTheme';\nimport { AutoSlider } from './AutoSlider';\nimport { ListSlider } from './ListSlider';\nconst slides = ['red', 'blue', 'yellow', 'orange'];\nconst style = {\n  width: '100%',\n  height: '100%',\n  opacity: 0.7\n};\ntype NewType = {\n  amount: number;\n  Component: typeof ListSlider | typeof AutoSlider;\n};\nconst Temp = ({\n  amount,\n  Component\n}: NewType) => <Component>\r\n    {slides.slice(0, amount).map((background, i) => <div key={i} style={{\n    ...style,\n    background\n  }} />)}\r\n  </Component>;\nconst meta = ({\n  component: Temp,\n  title: 'Gesture/Auto Slider',\n  decorators: [withCenteredStyle({\n    width: '100%'\n  }), withCustomTheme],\n  args: {\n    amount: 3\n  },\n  argTypes: {\n    amount: {\n      type: 'number',\n      control: {\n        type: 'range',\n        min: 1,\n        max: slides.length,\n        step: 1\n      }\n    }\n  }\n} satisfies Meta<typeof Temp>);\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const AnimateIndividualSlides: Story = {\n  args: {\n    Component: AutoSlider\n  }\n};\nexport const AnimateWholeContainer: Story = {\n  args: {\n    Component: ListSlider\n  }\n};\nAnimateIndividualSlides.parameters = {\n  ...AnimateIndividualSlides.parameters,\n  storySource: {\n    source: \"{\\n  args: {\\n    Component: AutoSlider\\n  }\\n}\",\n    ...AnimateIndividualSlides.parameters?.storySource\n  }\n};\nAnimateWholeContainer.parameters = {\n  ...AnimateWholeContainer.parameters,\n  storySource: {\n    source: \"{\\n  args: {\\n    Component: ListSlider\\n  }\\n}\",\n    ...AnimateWholeContainer.parameters?.storySource\n  }\n};"],"names":["Control","progress","x","useSpring","jsx","classes","animated","val","trans","int","count","i","step","fullRange","boundedValue","offset","positiveValue","itemValue","updateCurrentIndex","current","diff","getProgress","selected","length","rest","AutoSlider","props","children","interval","isHovered","setIsHovered","useState","useMemo","React","onMouseEnter","onMouseLeave","isDragging","setIsDragging","isAnimating","useRef","ref","width","useMeasure","setSelected","spring","recalcIndex","useCallback","p","res","bind","useDrag","x2","down","cancel","prev","useEffect","timer","handler","renderItems","child","jsxs","number","ListSlider","slides","style","Temp","amount","Component","background","meta","withCenteredStyle","withCustomTheme","AnimateIndividualSlides","AnimateWholeContainer","_a"],"mappings":"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"}
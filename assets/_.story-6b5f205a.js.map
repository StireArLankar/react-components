{"version":3,"file":"_.story-6b5f205a.js","sources":["../../src/components/gesture/DnDGrid/FilledDnDGrid/Item.tsx","../../src/components/gesture/DnDGrid/FilledDnDGrid/LazyItem.tsx","../../src/components/gesture/DnDGrid/FilledDnDGrid/index.tsx","../../src/components/gesture/DnDGrid/FilledDnDGrid/SwapDnDGrid.tsx","../../src/components/gesture/DnDGrid/FilledDnDGrid/UnfilledDnDGrid.tsx","../../src/components/gesture/DnDGrid/ConnectedItem.tsx","../../src/components/gesture/DnDGrid/StatefulDnDGrid.tsx","../../src/components/gesture/DnDGrid/Item.tsx","../../src/components/gesture/DnDGrid/index.tsx","../../src/components/gesture/DnDGrid/_.story.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\n\r\nimport { useSpring, animated, to } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport clamp from '~/utils/clamp'\r\n\r\nimport classes from '../_classes.css'\r\n\r\nconst updateAxis = (\r\n  val: number,\r\n  step: number,\r\n  current: number,\r\n  max: number\r\n) => {\r\n  const offset = val % step\r\n\r\n  const diff = (val - offset) / step\r\n\r\n  if (offset > step / 2) {\r\n    return clamp(current + diff + 1, 0, max)\r\n  } else if (offset < -step / 2) {\r\n    return clamp(current + diff - 1, 0, max)\r\n  }\r\n  return clamp(current + diff, 0, max)\r\n}\r\n\r\nexport interface ItemProps {\r\n  index: number\r\n  step: number\r\n  max: number\r\n  position: [number, number]\r\n\r\n  updatePosition: (index: number, x: number, y: number) => void\r\n}\r\n\r\nexport const Item = (props: ItemProps) => {\r\n  const { index, step, max, position, updatePosition } = props\r\n\r\n  const update = (x: number, y: number) => updatePosition(index, x, y)\r\n\r\n  const isDragging = useRef(false)\r\n  const [oldPos, setOldPos] = useState([...position])\r\n\r\n  const [{ x, y, scalE, zIndeX, shadow }, spring] = useSpring(() => ({\r\n    x: position[0] * step,\r\n    y: position[1] * step,\r\n    scalE: 1,\r\n    zIndeX: 0,\r\n    shadow: 1,\r\n  }))\r\n\r\n  useEffect(() => {\r\n    if (!isDragging.current) {\r\n      setOldPos([...position])\r\n      spring.start({\r\n        x: position[0] * step,\r\n        y: position[1] * step,\r\n        scalE: 1,\r\n        zIndeX: 0,\r\n        shadow: 1,\r\n      })\r\n    }\r\n  }, [position, spring, step])\r\n\r\n  const bind = useDrag(({ down, movement: [x, y] }) => {\r\n    const newX = updateAxis(x, step, oldPos[0], max)\r\n    const newY = updateAxis(y, step, oldPos[1], max)\r\n    if (down) {\r\n      isDragging.current = true\r\n      spring.start({\r\n        x: oldPos[0] * step + x,\r\n        y: oldPos[1] * step + y,\r\n        scalE: 1.1,\r\n        zIndeX: 100,\r\n        shadow: 15,\r\n      })\r\n    } else {\r\n      isDragging.current = false\r\n      setOldPos([newX, newY])\r\n      spring.start({\r\n        x: newX * step,\r\n        y: newY * step,\r\n        scalE: 1,\r\n        zIndeX: 0,\r\n        shadow: 1,\r\n      })\r\n    }\r\n\r\n    update(newX, newY)\r\n  })\r\n\r\n  return (\r\n    <animated.div\r\n      {...bind()}\r\n      className={classes.item}\r\n      style={{\r\n        zIndex: zIndeX.to((val) => Number(val.toFixed(0))),\r\n        boxShadow: shadow.to(\r\n          (s) => `0px ${s}px ${2 * s}px 0px rgba(0, 0, 0, 0.3)`\r\n        ),\r\n        transform: to(\r\n          [y, x, scalE],\r\n          (y, x, scalE) => `translate3d(${x}px, ${y}px, 0) scale(${scalE})`\r\n        ),\r\n      }}\r\n    >\r\n      <span className={classes.count}>{index}</span>\r\n    </animated.div>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nimport { useSpring, animated, to } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport clamp from '~/utils/clamp'\r\n\r\nimport classes from '../_classes.css'\r\n\r\nconst updateAxis = (\r\n  val: number,\r\n  step: number,\r\n  current: number,\r\n  max: number\r\n) => {\r\n  const offset = val % step\r\n\r\n  const diff = (val - offset) / step\r\n\r\n  if (offset > step / 2) {\r\n    return clamp(current + diff + 1, 0, max)\r\n  } else if (offset < -step / 2) {\r\n    return clamp(current + diff - 1, 0, max)\r\n  }\r\n  return clamp(current + diff, 0, max)\r\n}\r\n\r\nexport interface LazyItemProps {\r\n  index: number\r\n  step: number\r\n  max: number\r\n  position: [number, number]\r\n\r\n  updatePosition: (index: number, x: number, y: number) => void\r\n}\r\n\r\nexport const LazyItem = (props: LazyItemProps) => {\r\n  const { index, step, max, position, updatePosition } = props\r\n\r\n  const update = (x: number, y: number) => updatePosition(index, x, y)\r\n\r\n  const [{ x, y, scalE, zIndeX, shadow }, spring] = useSpring(() => ({\r\n    x: position[0] * step,\r\n    y: position[1] * step,\r\n    scalE: 1,\r\n    zIndeX: 0,\r\n    shadow: 1,\r\n  }))\r\n\r\n  useEffect(() => {\r\n    spring.start({\r\n      x: position[0] * step,\r\n      y: position[1] * step,\r\n      scalE: 1,\r\n      zIndeX: 0,\r\n      shadow: 1,\r\n    })\r\n  }, [position, spring, step])\r\n\r\n  const bind = useDrag(({ down, movement: [x, y] }) => {\r\n    if (down) {\r\n      spring.start({\r\n        x: position[0] * step + x,\r\n        y: position[1] * step + y,\r\n        scalE: 1.1,\r\n        zIndeX: 100,\r\n        shadow: 15,\r\n      })\r\n    } else {\r\n      const newX = updateAxis(x, step, position[0], max)\r\n      const newY = updateAxis(y, step, position[1], max)\r\n\r\n      if (newX === position[0] && newY === position[1]) {\r\n        spring.start({\r\n          x: position[0] * step,\r\n          y: position[1] * step,\r\n          scalE: 1,\r\n          zIndeX: 0,\r\n          shadow: 1,\r\n        })\r\n      }\r\n\r\n      update(newX, newY)\r\n    }\r\n  })\r\n\r\n  return (\r\n    <animated.div\r\n      {...bind()}\r\n      className={classes.item}\r\n      style={{\r\n        zIndex: zIndeX.to((val) => Number(val.toFixed(0))),\r\n        boxShadow: shadow.to(\r\n          (s) => `0px ${s}px ${2 * s}px 0px rgba(0, 0, 0, 0.3)`\r\n        ),\r\n        transform: to(\r\n          [y, x, scalE],\r\n          (y, x, scalE) => `translate3d(${x}px, ${y}px, 0) scale(${scalE})`\r\n        ),\r\n      }}\r\n    >\r\n      <span className={classes.count}>{index}</span>\r\n    </animated.div>\r\n  )\r\n}\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\n\r\nimport { produce } from 'immer'\r\n\r\nimport classes from '../_classes.css'\r\n\r\nimport { Item } from './Item'\r\nimport { LazyItem } from './LazyItem'\r\n\r\nconst MAGIC = 4\r\n\r\nconst arr: number[] = new Array(MAGIC * MAGIC).fill(0)\r\n\r\ntype IState = Array<[number, number]>\r\n\r\nconst getPos = ([x, y]: [number, number]) => y * MAGIC + x\r\nconst getXY = (pos: number): [number, number] => [\r\n  pos % MAGIC,\r\n  Math.floor(pos / MAGIC),\r\n]\r\n\r\nconst generateItems = (arr: number[]) => arr.map((_, index) => getXY(index))\r\n\r\nexport interface FilledDnDGridProps {\r\n  lazy?: boolean\r\n}\r\n\r\nexport const FilledDnDGrid = (props: FilledDnDGridProps) => {\r\n  const { lazy } = props\r\n\r\n  const [items, setItems] = useState<IState>(() => generateItems(arr))\r\n\r\n  const updateItemPosition = useCallback(\r\n    (index: number, x: number, y: number) => {\r\n      setItems((state) =>\r\n        produce(state, (draft) => {\r\n          const oldPos = getPos(draft[index])\r\n          const newPos = getPos([x, y])\r\n\r\n          if (oldPos === newPos) {\r\n            return\r\n          }\r\n\r\n          // 1 --> 3\r\n          state.forEach((item, i) => {\r\n            const itemPos = getPos(item)\r\n            // newPos > oldPos 1 --> 3\r\n            if (itemPos > oldPos && itemPos <= newPos) {\r\n              draft[i] = getXY(itemPos - 1)\r\n            }\r\n            // oldPos > newPos 1 <-- 3\r\n            if (itemPos < oldPos && itemPos >= newPos) {\r\n              draft[i] = getXY(itemPos + 1)\r\n            }\r\n          })\r\n\r\n          draft[index] = [x, y]\r\n        })\r\n      )\r\n    },\r\n    []\r\n  )\r\n\r\n  const Component = useMemo(() => (lazy ? LazyItem : Item), [lazy])\r\n\r\n  const counts = items.reduce(\r\n    (acc, cur) => {\r\n      const index = getPos(cur)\r\n      acc[index]++\r\n      return acc\r\n    },\r\n    [...arr]\r\n  )\r\n\r\n  const renderCells = () =>\r\n    counts.map((_, index) => <div key={index} className={classes.gridItem} />)\r\n\r\n  const renderItems = () =>\r\n    items.map((item, index) => (\r\n      <Component\r\n        key={index}\r\n        index={index}\r\n        step={100}\r\n        max={3}\r\n        position={item}\r\n        updatePosition={updateItemPosition}\r\n      />\r\n    ))\r\n\r\n  return (\r\n    <div className={classes.grid}>\r\n      {renderCells()}\r\n      {renderItems()}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useCallback, useMemo, useEffect } from 'react'\r\n\r\nimport { produce } from 'immer'\r\n\r\nimport classes from '../_classes.css'\r\n\r\nimport { Item } from './Item'\r\nimport { LazyItem } from './LazyItem'\r\n\r\nconst MAGIC = 4\r\n\r\nconst arr: number[] = new Array(MAGIC * MAGIC).fill(-1)\r\n\r\ntype IState = Array<[number, number]>\r\n\r\nconst getPos = ([x, y]: [number, number]) => y * MAGIC + x\r\nconst getXY = (pos: number): [number, number] => [\r\n  pos % MAGIC,\r\n  Math.floor(pos / MAGIC),\r\n]\r\n\r\nexport interface SwapDnDGridProps {\r\n  lazy?: boolean\r\n  full?: boolean\r\n}\r\n\r\nconst generateItems = (arr: number[]) => arr.map((_, index) => getXY(index))\r\nconst unfilledItems: IState = [\r\n  [0, 0],\r\n  [1, 2],\r\n  [3, 2],\r\n  [2, 3],\r\n  [0, 1],\r\n  [0, 2],\r\n  [1, 0],\r\n]\r\n\r\nexport const SwapDnDGrid = (props: SwapDnDGridProps) => {\r\n  const { lazy, full } = props\r\n\r\n  const [items, setItems] = useState<IState>([])\r\n\r\n  useEffect(() => {\r\n    setItems(full ? generateItems(arr) : unfilledItems)\r\n  }, [full])\r\n\r\n  const updateItemPosition = useCallback(\r\n    (index: number, x: number, y: number) => {\r\n      setItems((state) =>\r\n        produce(state, (draft) => {\r\n          const oldPos = getPos(draft[index])\r\n          let newPos = getPos([x, y])\r\n\r\n          if (oldPos === newPos) {\r\n            return\r\n          }\r\n\r\n          const targetIndex = state.findIndex((item) => getPos(item) === newPos)\r\n\r\n          draft[targetIndex] = getXY(oldPos)\r\n          draft[index] = [x, y]\r\n        })\r\n      )\r\n    },\r\n    []\r\n  )\r\n\r\n  const Component = useMemo(() => (lazy ? LazyItem : Item), [lazy])\r\n\r\n  const counts = items.reduce(\r\n    (acc, cur) => {\r\n      const index = getPos(cur)\r\n      acc[index]++\r\n      return acc\r\n    },\r\n    [...arr]\r\n  )\r\n\r\n  const renderCells = () =>\r\n    counts.map((_, index) => <div key={index} className={classes.gridItem} />)\r\n\r\n  const renderItems = () =>\r\n    items.map((item, index) => (\r\n      <Component\r\n        key={index}\r\n        index={index}\r\n        step={100}\r\n        max={3}\r\n        position={item}\r\n        updatePosition={updateItemPosition}\r\n      />\r\n    ))\r\n\r\n  return (\r\n    <div className={classes.grid}>\r\n      {renderCells()}\r\n      {renderItems()}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useCallback, useMemo, useEffect } from 'react'\r\n\r\nimport { produce } from 'immer'\r\n\r\nimport classes from '../_classes.css'\r\n\r\nimport { Item } from './Item'\r\nimport { LazyItem } from './LazyItem'\r\n\r\nconst MAGIC = 4\r\n\r\nconst arr: number[] = new Array(MAGIC * MAGIC).fill(-1)\r\n\r\ntype IState = Array<[number, number]>\r\n\r\nconst getPos = ([x, y]: [number, number]) => y * MAGIC + x\r\nconst getXY = (pos: number): [number, number] => [\r\n  pos % MAGIC,\r\n  Math.floor(pos / MAGIC),\r\n]\r\n\r\nexport interface UnfilledDnDGridProps {\r\n  lazy?: boolean\r\n  full?: boolean\r\n}\r\n\r\nconst generateItems = (arr: number[]) => arr.map((_, index) => getXY(index))\r\nconst unfilledItems: IState = [\r\n  [0, 0],\r\n  [1, 2],\r\n  [3, 2],\r\n  [2, 3],\r\n  [0, 1],\r\n  [0, 2],\r\n  [1, 0],\r\n]\r\n\r\nexport const UnfilledDnDGrid = (props: UnfilledDnDGridProps) => {\r\n  const { lazy, full } = props\r\n\r\n  const [items, setItems] = useState<IState>([])\r\n\r\n  useEffect(() => {\r\n    setItems(full ? generateItems(arr) : unfilledItems)\r\n  }, [full])\r\n\r\n  const updateItemPosition = useCallback(\r\n    (index: number, x: number, y: number) => {\r\n      setItems((state) =>\r\n        produce(state, (draft) => {\r\n          const oldPos = getPos(draft[index])\r\n          let newPos = getPos([x, y])\r\n\r\n          if (oldPos === newPos) {\r\n            return\r\n          }\r\n\r\n          const field = arr.slice()\r\n          state.forEach((item, index) => (field[getPos(item)] = index))\r\n          // [0, _ , 2, _ , 1]\r\n\r\n          // Flag for checking first item for left cell\r\n          let first = true\r\n          // Check if cell is filled (field[newPos] === index)\r\n          let check = field[newPos] !== -1\r\n          while (check) {\r\n            if (first) {\r\n              first = false\r\n              // Bounds stuff\r\n              const prevPos = newPos - 1 < 0 ? MAGIC * MAGIC - 1 : newPos - 1\r\n              // Check prev cell (and check if its position of dragged item)\r\n              check = field[prevPos] === -1 || prevPos === oldPos\r\n\r\n              if (check) {\r\n                draft[field[newPos]] = getXY(prevPos)\r\n                break\r\n              }\r\n            }\r\n\r\n            // Bounds stuff\r\n            const nextPos = newPos + 1 > MAGIC * MAGIC - 1 ? 0 : newPos + 1\r\n\r\n            // Check next cell (and check in case of position of dragged item)\r\n            check = field[nextPos] !== -1 && nextPos !== oldPos\r\n\r\n            // Move item in newPos cell to right\r\n            draft[field[newPos]] = getXY(nextPos)\r\n\r\n            // Change attention to next cell in case its filled\r\n            newPos = nextPos\r\n          }\r\n\r\n          draft[index] = [x, y]\r\n        })\r\n      )\r\n    },\r\n    []\r\n  )\r\n\r\n  const Component = useMemo(() => (lazy ? LazyItem : Item), [lazy])\r\n\r\n  const counts = items.reduce(\r\n    (acc, cur) => {\r\n      const index = getPos(cur)\r\n      acc[index]++\r\n      return acc\r\n    },\r\n    [...arr]\r\n  )\r\n\r\n  const renderCells = () =>\r\n    counts.map((_, index) => <div key={index} className={classes.gridItem} />)\r\n\r\n  const renderItems = () =>\r\n    items.map((item, index) => (\r\n      <Component\r\n        key={index}\r\n        index={index}\r\n        step={100}\r\n        max={3}\r\n        position={item}\r\n        updatePosition={updateItemPosition}\r\n      />\r\n    ))\r\n\r\n  return (\r\n    <div className={classes.grid}>\r\n      {renderCells()}\r\n      {renderItems()}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nimport { useSpring, animated, to } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport clamp from '~/utils/clamp'\r\n\r\nimport classes from './_classes.css'\r\n\r\nconst updateAxis = (\r\n  val: number,\r\n  step: number,\r\n  current: number,\r\n  max: number\r\n) => {\r\n  const offset = val % step\r\n\r\n  const diff = (val - offset) / step\r\n\r\n  if (offset > step / 2) {\r\n    return clamp(current + diff + 1, 0, max)\r\n  } else if (offset < -step / 2) {\r\n    return clamp(current + diff - 1, 0, max)\r\n  }\r\n\r\n  return clamp(current + diff, 0, max)\r\n}\r\n\r\nexport interface ConnectedItemProps {\r\n  index: number\r\n  step: number\r\n  max: number\r\n  position: [number, number]\r\n\r\n  updatePosition: (index: number, x: number, y: number) => void\r\n}\r\n\r\nexport const ConnectedItem = (props: ConnectedItemProps) => {\r\n  const { index, step, max, position, updatePosition } = props\r\n\r\n  const update = (x: number, y: number) => updatePosition(index, x, y)\r\n\r\n  const [{ x, y, scalE, zIndeX, shadow, opacity }, spring] = useSpring(() => ({\r\n    x: position[0] * step,\r\n    y: position[1] * step,\r\n    scalE: 1,\r\n    zIndeX: 0,\r\n    shadow: 1,\r\n    opacity: 0.6,\r\n  }))\r\n\r\n  useEffect(() => {\r\n    spring.start({\r\n      x: position[0] * step,\r\n      y: position[1] * step,\r\n      scalE: 1,\r\n      zIndeX: 0,\r\n      shadow: 1,\r\n      opacity: 0.6,\r\n    })\r\n  }, [position, spring, step])\r\n\r\n  const bind = useDrag(({ down, movement: [x, y] }) => {\r\n    if (down) {\r\n      spring.start({\r\n        x: position[0] * step + x,\r\n        y: position[1] * step + y,\r\n        scalE: 1.1,\r\n        zIndeX: 100,\r\n        shadow: 15,\r\n        opacity: 1,\r\n      })\r\n    } else {\r\n      const newX = updateAxis(x, step, position[0], max)\r\n      const newY = updateAxis(y, step, position[1], max)\r\n\r\n      update(newX, newY)\r\n    }\r\n  })\r\n\r\n  return (\r\n    <animated.div\r\n      {...bind()}\r\n      className={classes.item}\r\n      style={{\r\n        zIndex: zIndeX.to((val) => Number(val.toFixed(0))),\r\n        boxShadow: shadow.to(\r\n          (s) => `0px ${s}px ${2 * s}px 0px rgba(0, 0, 0, 0.3)`\r\n        ),\r\n        transform: to(\r\n          [y, x, scalE],\r\n          (y, x, scalE) => `translate3d(${x}px, ${y}px, 0) scale(${scalE})`\r\n        ),\r\n        opacity,\r\n      }}\r\n    />\r\n  )\r\n}\r\n","import React, { useState, useCallback } from 'react'\r\n\r\nimport { produce } from 'immer'\r\n\r\nimport classes from './_classes.css'\r\nimport { ConnectedItem } from './ConnectedItem'\r\n\r\nconst arr: number[] = new Array(16).fill(0)\r\n\r\ntype IState = Array<[number, number]>\r\n\r\nexport const StatefulDnDGrid = () => {\r\n  const [items, setItems] = useState<IState>(() => [\r\n    [0, 0],\r\n    [1, 2],\r\n    [2, 2],\r\n    [1, 2],\r\n    [1, 2],\r\n    [3, 2],\r\n  ])\r\n\r\n  const updateItemPosition = useCallback(\r\n    (index: number, x: number, y: number) => {\r\n      setItems((state) =>\r\n        produce(state, (draft) => {\r\n          draft[index] = [x, y]\r\n        })\r\n      )\r\n    },\r\n    []\r\n  )\r\n\r\n  const counts = items.reduce(\r\n    (acc, cur) => {\r\n      const index = cur[0] + cur[1] * 4\r\n      acc[index]++\r\n      return acc\r\n    },\r\n    [...arr]\r\n  )\r\n\r\n  const renderCells = () =>\r\n    counts.map((count, index) => (\r\n      <div key={index} className={classes.gridItem}>\r\n        <span className={classes.count}>{count > 0 ? count : null}</span>\r\n      </div>\r\n    ))\r\n\r\n  const renderItems = () =>\r\n    items.map((item, index) => (\r\n      <ConnectedItem\r\n        key={index}\r\n        index={index}\r\n        step={100}\r\n        max={3}\r\n        position={item}\r\n        updatePosition={updateItemPosition}\r\n      />\r\n    ))\r\n\r\n  return (\r\n    <div className={classes.grid}>\r\n      {renderCells()}\r\n      {renderItems()}\r\n    </div>\r\n  )\r\n}\r\n","import { useRef } from 'react'\r\n\r\nimport { useSpring, animated, to } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport clamp from '~/utils/clamp'\r\n\r\nimport classes from './_classes.css'\r\n\r\nconst updateVal = (val: number, step: number, current: number, max: number) => {\r\n  const offset = val % step\r\n\r\n  if (offset > step / 2) {\r\n    return clamp(current + val - offset + step, 0, max * step)\r\n  } else if (offset < -step / 2) {\r\n    return clamp(current + val - offset - step, 0, max * step)\r\n  }\r\n  return clamp(current + val - offset, 0, max * step)\r\n}\r\n\r\nexport const Item = (props: { index: number; step: number; max: number }) => {\r\n  const { index, step, max } = props\r\n\r\n  const [{ x, y, scalE, zIndeX, shadow }, spring] = useSpring(() => ({\r\n    x: index * step,\r\n    y: 0,\r\n    scalE: 1,\r\n    zIndeX: 0,\r\n    shadow: 1,\r\n  }))\r\n\r\n  const dragOffset = useRef({ x: index * step, y: 0 })\r\n\r\n  const bind = useDrag(({ down, movement: [x, y] }) => {\r\n    if (down) {\r\n      spring.start({\r\n        x: dragOffset.current.x + x,\r\n        y: dragOffset.current.y + y,\r\n        scalE: 1.1,\r\n        zIndeX: 100,\r\n        shadow: 15,\r\n      })\r\n    } else {\r\n      dragOffset.current.x = updateVal(x, step, dragOffset.current.x, max)\r\n      dragOffset.current.y = updateVal(y, step, dragOffset.current.y, max)\r\n\r\n      spring.start({\r\n        x: dragOffset.current.x,\r\n        y: dragOffset.current.y,\r\n        scalE: 1,\r\n        zIndeX: 0,\r\n        shadow: 1,\r\n      })\r\n    }\r\n  })\r\n\r\n  return (\r\n    <animated.div\r\n      {...bind()}\r\n      className={classes.item}\r\n      style={{\r\n        zIndex: zIndeX.to((val) => Number(val.toFixed(0))),\r\n        boxShadow: shadow.to(\r\n          (s) => `0px ${s}px ${2 * s}px 0px rgba(0, 0, 0, 0.3)`\r\n        ),\r\n        transform: to(\r\n          [y, x, scalE],\r\n          (y, x, scalE) => `translate3d(${x}px, ${y}px, 0) scale(${scalE})`\r\n        ),\r\n      }}\r\n    />\r\n  )\r\n}\r\n","import classes from './_classes.css'\r\nimport { Item } from './Item'\r\n\r\nconst arr = new Array(16).fill('')\r\n\r\nexport const DnDGrid = () => {\r\n  const renderCells = () =>\r\n    arr.map((_, index) => <div key={index} className={classes.gridItem} />)\r\n\r\n  return (\r\n    <div className={classes.grid}>\r\n      {renderCells()}\r\n      <Item index={0} step={100} max={4 - 1} />\r\n      <Item index={1} step={100} max={4 - 1} />\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentStory } from '@storybook/react';\nimport { withCenteredStyle } from '~/_storybook/withCenteredStyle';\nimport { withCustomTheme } from '~/_storybook/withCustomTheme';\nimport { FilledDnDGrid } from './FilledDnDGrid';\nimport { SwapDnDGrid } from './FilledDnDGrid/SwapDnDGrid';\nimport { UnfilledDnDGrid } from './FilledDnDGrid/UnfilledDnDGrid';\nimport { StatefulDnDGrid } from './StatefulDnDGrid';\nimport { DnDGrid } from '.';\nexport default {\n  title: 'Gesture/DnDGrid',\n  decorators: [withCenteredStyle({\n    width: '100vw',\n    height: '100vh',\n    display: 'grid',\n    placeItems: 'center',\n    overflow: 'hidden',\n    background: '#32394e'\n  }), withCustomTheme]\n};\nexport const _DndGrid = () => <DnDGrid />;\nexport const _StatefulDndGrid = () => <StatefulDnDGrid />;\nexport const _FilledLazyDndGrid = () => <FilledDnDGrid lazy />;\nexport const _FilledDndGrid = () => <FilledDnDGrid />;\nconst Template: ComponentStory<typeof UnfilledDnDGrid> = props => <UnfilledDnDGrid {...props} />;\nexport const _UnfilledDndGrid = Template.bind({});\n_UnfilledDndGrid.args = {\n  full: false,\n  lazy: false\n};\nconst Template1: ComponentStory<typeof SwapDnDGrid> = props => <SwapDnDGrid {...props} />;\nexport const _SwapDndGrid = Template1.bind({});\n_SwapDndGrid.args = {\n  full: false,\n  lazy: false\n};\n_DndGrid.parameters = {\n  ..._DndGrid.parameters,\n  storySource: {\n    source: \"() => <DnDGrid />\",\n    ..._DndGrid.parameters?.storySource\n  }\n};\n_StatefulDndGrid.parameters = {\n  ..._StatefulDndGrid.parameters,\n  storySource: {\n    source: \"() => <StatefulDnDGrid />\",\n    ..._StatefulDndGrid.parameters?.storySource\n  }\n};\n_FilledLazyDndGrid.parameters = {\n  ..._FilledLazyDndGrid.parameters,\n  storySource: {\n    source: \"() => <FilledDnDGrid lazy />\",\n    ..._FilledLazyDndGrid.parameters?.storySource\n  }\n};\n_FilledDndGrid.parameters = {\n  ..._FilledDndGrid.parameters,\n  storySource: {\n    source: \"() => <FilledDnDGrid />\",\n    ..._FilledDndGrid.parameters?.storySource\n  }\n};\n_UnfilledDndGrid.parameters = {\n  ..._UnfilledDndGrid.parameters,\n  storySource: {\n    source: \"props => <UnfilledDnDGrid {...props} />\",\n    ..._UnfilledDndGrid.parameters?.storySource\n  }\n};\n_SwapDndGrid.parameters = {\n  ..._SwapDndGrid.parameters,\n  storySource: {\n    source: \"props => <SwapDnDGrid {...props} />\",\n    ..._SwapDndGrid.parameters?.storySource\n  }\n};"],"names":["updateAxis","val","step","current","max","offset","diff","clamp","Item","props","index","position","updatePosition","update","x2","y2","isDragging","useRef","oldPos","setOldPos","useState","x","y","scalE","zIndeX","shadow","spring","useSpring","useEffect","bind","useDrag","down","newX","newY","jsx","animated","classes","s","to","scalE2","LazyItem","MAGIC","arr","getPos","getXY","pos","generateItems","arr2","_","FilledDnDGrid","lazy","items","setItems","updateItemPosition","useCallback","state","produce","draft","newPos","item","i","itemPos","Component","useMemo","counts","acc","cur","renderCells","renderItems","jsxs","unfilledItems","SwapDnDGrid","full","targetIndex","UnfilledDnDGrid","field","index2","first","check","prevPos","nextPos","ConnectedItem","opacity","StatefulDnDGrid","count","updateVal","dragOffset","DnDGrid","__story","withCenteredStyle","withCustomTheme","_DndGrid","_StatefulDndGrid","_FilledLazyDndGrid","_FilledDndGrid","Template","_UnfilledDndGrid","Template1","_SwapDndGrid","_a"],"mappings":"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"}
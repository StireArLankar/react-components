{"version":3,"file":"_.story-64979e54.js","sources":["../../src/components/design/Json/Base.tsx","../../src/components/design/Json/index.tsx","../../src/components/design/Json/_.story.tsx"],"sourcesContent":["import * as React from 'react'\r\n\r\ninterface ITheme {\r\n  [key: string]: string\r\n}\r\n\r\ninterface IProps extends React.HTMLAttributes<HTMLElement> {\r\n  json?: any\r\n  data?: any\r\n  space?: number | string\r\n  themeClassName?: string\r\n  theme?: ITheme\r\n  silent?: boolean\r\n  onJSONPrettyError?: (e: Error) => void\r\n  mainStyle?: string\r\n  keyStyle?: string\r\n  stringStyle?: string\r\n  valueStyle?: string\r\n  booleanStyle?: string\r\n  errorStyle?: string\r\n}\r\n\r\ntype kees = 'main' | 'key' | 'string' | 'value' | 'boolean' | 'error'\r\n\r\ntype Styles = {\r\n  [K in kees as `${K}Style`]?: string\r\n}\r\n\r\nconst getStyleValue = (name: kees, theme: ITheme, styles: Styles): string => {\r\n  const _kee = `${name}Style` as const\r\n  const extra = styles[_kee] || ''\r\n  const style = theme ? theme[name] || '' : ''\r\n  return extra ? `${extra};${style}` : style\r\n}\r\n\r\nconst getStyle = (name: kees, theme: ITheme, styles: Styles): string => {\r\n  const value = getStyleValue(name, theme, styles)\r\n  return value ? ` style=\"${value}\"` : ''\r\n}\r\n\r\nconst defaultTheme = {\r\n  main: 'line-height:1.3;color:#66d9ef;background:#272822;width:max-content;margin: 0',\r\n  error:\r\n    'line-height:1.3;color:#66d9ef;background:#272822;width:max-content;margin: 0',\r\n  key: 'color:#f92672;',\r\n  string: 'color:#fd971f;',\r\n  value: 'color:#a6e22e;',\r\n  boolean: 'color:#ac81fe;',\r\n}\r\n\r\nconst xssmap: { [key: string]: string } = {\r\n  '\"': '&quot;',\r\n  \"'\": '&apos;',\r\n  '&': '&amp;',\r\n  '>': '&gt;',\r\n  '<': '&lt',\r\n  ',': '&sbquo;',\r\n}\r\n\r\nconst xss = (s: string): string =>\r\n  Boolean(s) ? s.replace(/<|>|&|\"|'/g, (m) => xssmap[m]) : s\r\n\r\nexport class JSONPretty extends React.Component<IProps, {}> {\r\n  public render() {\r\n    const {\r\n      json = '',\r\n      data = '',\r\n      space = 2,\r\n      themeClassName = '__json-pretty__',\r\n      theme = defaultTheme,\r\n      onJSONPrettyError,\r\n      onError,\r\n      silent = true,\r\n      mainStyle,\r\n      keyStyle,\r\n      valueStyle,\r\n      stringStyle,\r\n      booleanStyle,\r\n      errorStyle,\r\n      ...rest\r\n    } = this.props\r\n\r\n    const styles = {\r\n      mainStyle,\r\n      keyStyle,\r\n      valueStyle,\r\n      stringStyle,\r\n      booleanStyle,\r\n      errorStyle,\r\n    }\r\n\r\n    let obj = data || json\r\n\r\n    // See https://facebook.github.io/react/warnings/unknown-prop.html\r\n    if (typeof obj === 'string') {\r\n      try {\r\n        obj = JSON.parse(obj)\r\n      } catch (e: any) {\r\n        if (!silent) {\r\n          console.warn(`[react-json-pretty]: ${e.message}`)\r\n        }\r\n\r\n        if (onJSONPrettyError) {\r\n          onJSONPrettyError(e)\r\n        }\r\n\r\n        if (!onJSONPrettyError && onError) {\r\n          onError(e)\r\n          console.warn(\r\n            'JSONPretty#onError is deprecated, please use JSONPretty#onJSONPrettyError instead'\r\n          )\r\n        }\r\n\r\n        return (\r\n          <div\r\n            {...rest}\r\n            dangerouslySetInnerHTML={{\r\n              __html: `<pre class=\"__json-pretty-error__\"${getStyle(\r\n                'error',\r\n                theme,\r\n                styles\r\n              )}>${xss(obj)}</pre>`,\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div\r\n        {...rest}\r\n        dangerouslySetInnerHTML={{\r\n          __html: `<pre class=\"${themeClassName}\"${getStyle(\r\n            'main',\r\n            theme,\r\n            styles\r\n          )}>${this._pretty(theme, obj, +space, styles)}</pre>`,\r\n        }}\r\n      />\r\n    )\r\n  }\r\n\r\n  private _pretty(theme: ITheme, obj: any, space: number, styles: any) {\r\n    const regLine =\r\n      /^( *)(\"[^\"]+\": )?(\".*\"|\"[^\"]*\"|[\\w.+-]*)?([,[{]|\\[\\s*\\],?|\\{\\s*\\},?)?$/gm\r\n\r\n    const text = JSON.stringify(obj, null, isNaN(space) ? 2 : space)\r\n\r\n    if (!text) {\r\n      return text\r\n    }\r\n\r\n    return text\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/\\\\\"([^,])/g, '\\\\&quot;$1')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(regLine, this._replace.bind(null, theme, styles))\r\n  }\r\n\r\n  private _replace(\r\n    theme: ITheme,\r\n    styles: any,\r\n    match: any,\r\n    ind: string,\r\n    key: string,\r\n    val: string,\r\n    tra: string\r\n  ) {\r\n    const spanEnd = '</span>'\r\n    const keySpan = `<span class=\"__json-key__\"${getStyle(\r\n      'key',\r\n      theme,\r\n      styles\r\n    )}>`\r\n    const valSpan = `<span class=\"__json-value__\"${getStyle(\r\n      'value',\r\n      theme,\r\n      styles\r\n    )}>`\r\n    const strSpan = `<span class=\"__json-string__\"${getStyle(\r\n      'string',\r\n      theme,\r\n      styles\r\n    )}>`\r\n    const booSpan = `<span class=\"__json-boolean__\"${getStyle(\r\n      'boolean',\r\n      theme,\r\n      styles\r\n    )}>`\r\n\r\n    let sps = ind || ''\r\n\r\n    if (key) {\r\n      sps = sps + '\"' + keySpan + key.replace(/^\"|\":\\s$/g, '') + spanEnd + '\": '\r\n    }\r\n\r\n    if (val) {\r\n      if (val === 'true' || val === 'false') {\r\n        sps = sps + booSpan + val + spanEnd\r\n      } else {\r\n        sps = sps + (val[0] === '\"' ? strSpan : valSpan) + val + spanEnd\r\n      }\r\n    }\r\n\r\n    return sps + (tra || '')\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\n\r\nimport clsx from 'clsx'\r\n\r\nimport classes from './_classes.css'\r\n\r\ntype Theme = Partial<typeof classes>\r\n\r\ntype IProps = {\r\n  json: object\r\n  space?: number\r\n  theme?: Theme\r\n}\r\n\r\nexport default (props: IProps) => {\r\n  const { json, space = 2, theme = {} } = props\r\n\r\n  const __html = useMemo(() => {\r\n    return convertJsonToHMTL(json, space, theme)\r\n  }, [json, space, theme])\r\n\r\n  return (\r\n    <div>\r\n      <pre\r\n        className={clsx(classes.main, theme.main)}\r\n        dangerouslySetInnerHTML={{ __html }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst convertJsonToHMTL = (obj: object, space: number, theme: Theme) => {\r\n  const regLine =\r\n    /^( *)(\"[^\"]+\": )?(\".*\"|\"[^\"]*\"|[\\w.+-]*)?([,[{]|\\[\\s*\\],?|\\{\\s*\\},?)?$/gm\r\n\r\n  const text = JSON.stringify(obj, null, space)\r\n\r\n  if (!text) {\r\n    return text\r\n  }\r\n\r\n  return text\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/\\\\\"([^,])/g, '\\\\&quot;$1')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(regLine, (_, ...args) =>\r\n      replaceCapturedStringWithHtml(theme, ...args)\r\n    )\r\n}\r\n\r\nconst replaceCapturedStringWithHtml = (theme: Theme, ...args: string[]) => {\r\n  const [ind = '', key, val, tra = ''] = args\r\n\r\n  const spanEnd = '</span>'\r\n  const keySpan = `<span class=\"${clsx(classes.key, theme.key)}\">`\r\n  const valSpan = `<span class=\"${clsx(classes.value, theme.value)}\">`\r\n  const strSpan = `<span class=\"${clsx(classes.string, theme.string)}\">`\r\n  const booSpan = `<span class=\"${clsx(classes.boolean, theme.boolean)}\">`\r\n\r\n  let sps = ind\r\n\r\n  if (key) {\r\n    sps = `${sps}\"${keySpan}${key.replace(/^\"|\":\\s$/g, '')}${spanEnd}\": `\r\n  }\r\n\r\n  if (val) {\r\n    if (val === 'true' || val === 'false') {\r\n      sps = sps + booSpan + val + spanEnd\r\n    } else {\r\n      sps = sps + (val[0] === '\"' ? strSpan : valSpan) + val + spanEnd\r\n    }\r\n  }\r\n\r\n  return sps + tra\r\n}\r\n","import { Meta, StoryObj } from '@storybook/react';\nimport { withCenteredStyle } from '~/_storybook/withCenteredStyle';\nimport { withCustomTheme } from '~/_storybook/withCustomTheme';\nimport { withTopLabel } from '~/_storybook/withTopLabel';\nimport { storyLink } from '~/theme/theme.css';\nimport { acai } from './_classes.css';\nimport { JSONPretty } from './Base';\nimport json from './json.json';\nimport Json from '.';\nconst label = <>\r\n    <span>Credits to </span>\r\n    <a className={storyLink} href='https://github.com/chenckang/react-json-pretty'>\r\n      project\r\n    </a>\r\n  </>;\nconst meta = ({\n  title: 'Design/Json',\n  component: Json,\n  decorators: [withCustomTheme, withCenteredStyle({\n    width: '100%',\n    display: 'grid',\n    alignItems: 'stretch',\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    overflow: 'auto',\n    justifyContent: 'unset'\n  }), withTopLabel(label)]\n} satisfies Meta<typeof Json>);\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Initial: StoryObj<typeof JSONPretty> = {\n  render: () => <JSONPretty data={json} />\n};\nconst themes = {\n  default: undefined,\n  acai\n};\nexport const Rewritten: Story = {\n  args: {\n    json,\n    space: 2\n  },\n  argTypes: {\n    theme: {\n      options: Object.keys(themes),\n      mapping: themes,\n      control: {\n        type: 'select',\n        labels: {\n          default: 'default',\n          acai: 'acai'\n        }\n      }\n    }\n  }\n};\nexport const AcaiTheme = () => <Json json={json} theme={acai} />;\nexport const NestedJson = () => <Json json={{\n  hello1: 'world',\n  hello2: 'world',\n  hello3: 'world',\n  sad: {\n    world: [1, 2, 3],\n    bool: true\n  },\n  hello: JSON.stringify({\n    hello: 'world',\n    hello1: 'world',\n    hello2: 'world',\n    hello3: 'world',\n    sad: {\n      world: [1, 2, 3],\n      bool: true\n    }\n  })\n}} />;\nInitial.parameters = {\n  ...Initial.parameters,\n  storySource: {\n    source: \"{\\n  render: () => <JSONPretty data={json} />\\n}\",\n    ...Initial.parameters?.storySource\n  }\n};\nRewritten.parameters = {\n  ...Rewritten.parameters,\n  storySource: {\n    source: \"{\\n  args: {\\n    json,\\n    space: 2\\n  },\\n  argTypes: {\\n    theme: {\\n      options: Object.keys(themes),\\n      mapping: themes,\\n      control: {\\n        type: 'select',\\n        labels: {\\n          default: 'default',\\n          acai: 'acai'\\n        }\\n      }\\n    }\\n  }\\n}\",\n    ...Rewritten.parameters?.storySource\n  }\n};\nAcaiTheme.parameters = {\n  ...AcaiTheme.parameters,\n  storySource: {\n    source: \"() => <Json json={json} theme={acai} />\",\n    ...AcaiTheme.parameters?.storySource\n  }\n};\nNestedJson.parameters = {\n  ...NestedJson.parameters,\n  storySource: {\n    source: \"() => <Json json={{\\n  hello1: 'world',\\n  hello2: 'world',\\n  hello3: 'world',\\n  sad: {\\n    world: [1, 2, 3],\\n    bool: true\\n  },\\n  hello: JSON.stringify({\\n    hello: 'world',\\n    hello1: 'world',\\n    hello2: 'world',\\n    hello3: 'world',\\n    sad: {\\n      world: [1, 2, 3],\\n      bool: true\\n    }\\n  })\\n}} />\",\n    ...NestedJson.parameters?.storySource\n  }\n};"],"names":["getStyleValue","name","theme","styles","_kee","extra","style","getStyle","value","defaultTheme","xssmap","xss","s","m","JSONPretty","React.Component","json","data","space","themeClassName","onJSONPrettyError","onError","silent","mainStyle","keyStyle","valueStyle","stringStyle","booleanStyle","errorStyle","rest","obj","e","jsx","regLine","text","match","ind","key","val","tra","spanEnd","keySpan","valSpan","strSpan","booSpan","sps","Json$1","props","__html","useMemo","convertJsonToHMTL","clsx","classes","_","args","replaceCapturedStringWithHtml","label","jsxs","Fragment","storyLink","meta","Json","withCustomTheme","withCenteredStyle","withTopLabel","Initial","themes","acai","Rewritten","AcaiTheme","NestedJson","_a"],"mappings":"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"}
{"version":3,"file":"FormFields.story-345519d3.js","sources":["../../src/components/native/FormFields/Fields/SelectInput.tsx","../../src/components/native/FormFields/Fields/TextareaInput.tsx","../../src/components/native/FormFields/Fields/TextInput.tsx","../../src/components/native/FormFields/Fields/index.tsx","../../src/components/native/FormFields/fields.types.ts","../../src/components/native/FormFields/FieldsSelect.tsx","../../src/components/native/FormFields/TextDisplay.tsx","../../src/components/native/FormFields/index.tsx","../../src/components/native/FormFields/FormFields.story.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport { SelectField } from '../fields.types'\r\n\r\nexport type SelectInputProps = SelectField & {\r\n  onChange: (value: string) => void\r\n}\r\n\r\nconst SelectInput = (props: SelectInputProps) => {\r\n  const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const { value } = e.target\r\n    props.onChange(value)\r\n  }\r\n\r\n  return (\r\n    <select onChange={onChange} value={props.value}>\r\n      {props.options.data.map((item) => (\r\n        <option value={item} key={item}>\r\n          {item}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default SelectInput\r\n","import React from 'react'\r\n\r\nimport { TextAreaField } from '../fields.types'\r\n\r\nimport classes from './fields.module.scss'\r\n\r\nexport type TextareaInputProps = TextAreaField & {\r\n  onChange: (value: string) => void\r\n}\r\n\r\nconst TextareaInput = (props: TextareaInputProps) => {\r\n  const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { value } = e.target\r\n    props.onChange(value)\r\n  }\r\n\r\n  return (\r\n    <textarea\r\n      name={props.name}\r\n      id={props.name}\r\n      value={props.value}\r\n      onChange={onChange}\r\n      placeholder={props.options.placeholder}\r\n      className={classes.textarea}\r\n      rows={4}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TextareaInput\r\n","import React from 'react'\r\n\r\nimport { TextField } from '../fields.types'\r\n\r\nexport type TextInputProps = TextField & {\r\n  onChange: (value: string) => void\r\n}\r\n\r\nconst TextInput = (props: TextInputProps) => {\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target\r\n    props.onChange(value)\r\n  }\r\n\r\n  return (\r\n    <input\r\n      type='text'\r\n      name={props.name}\r\n      id={props.name}\r\n      value={props.value}\r\n      onChange={onChange}\r\n      placeholder={props.options.placeholder}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TextInput\r\n","import React from 'react'\r\n\r\nimport classes from './fields.module.scss'\r\nimport SelectInput, { SelectInputProps } from './SelectInput'\r\nimport TextareaInput, { TextareaInputProps } from './TextareaInput'\r\nimport TextInput, { TextInputProps } from './TextInput'\r\n\r\nconst mapper = {\r\n  text: (\r\n    props: Omit<TextInputProps, 'onChange'>,\r\n    onChange: (val: string) => void\r\n  ) => <TextInput {...props} onChange={onChange} />,\r\n  textarea: (\r\n    props: Omit<TextareaInputProps, 'onChange'>,\r\n    onChange: (val: string) => void\r\n  ) => <TextareaInput {...props} onChange={onChange} />,\r\n  select: (\r\n    props: Omit<SelectInputProps, 'onChange'>,\r\n    onChange: (val: string) => void\r\n  ) => <SelectInput {...props} onChange={onChange} />,\r\n}\r\n\r\nconst mapper1 = (\r\n  item: Props['fields'][number],\r\n  onChange: (val: string) => void\r\n) => {\r\n  switch (item.type) {\r\n    case 'text':\r\n      return mapper[item.type](item, onChange)\r\n    case 'textarea':\r\n      return mapper[item.type](item, onChange)\r\n    case 'select':\r\n      return mapper[item.type](item, onChange)\r\n  }\r\n}\r\n\r\ntype Props = {\r\n  fields: Array<\r\n    | (Omit<TextInputProps, 'onChange'> & { type: 'text' })\r\n    | (Omit<TextareaInputProps, 'onChange'> & { type: 'textarea' })\r\n    | (Omit<SelectInputProps, 'onChange'> & { type: 'select' })\r\n  >\r\n  removeField: (index: number) => (e: React.MouseEvent) => void\r\n  updateField: (index: number) => (val: string) => void\r\n}\r\n\r\nconst Fields = (props: Props) => {\r\n  const renderFields = () =>\r\n    props.fields.map((field, index) => (\r\n      <div className={classes.field} key={field.name}>\r\n        <p className={classes.label}>\r\n          <label htmlFor={field.name}>{field.label}</label>\r\n          <button type='button' onClick={props.removeField(index)}>\r\n            X\r\n          </button>\r\n        </p>\r\n        {mapper1(field, props.updateField(index))}\r\n      </div>\r\n    ))\r\n\r\n  return <div className={classes.wrapper}>{renderFields()}</div>\r\n}\r\n\r\nexport default Fields\r\n","interface BaseField {\r\n  value: string\r\n  name: string\r\n  label: string\r\n  options: {\r\n    defaultValue: string\r\n    label: string\r\n  }\r\n}\r\n\r\nexport interface TextField extends BaseField {\r\n  options: {\r\n    defaultValue: string\r\n    placeholder: string\r\n    label: string\r\n  }\r\n  type: 'text'\r\n}\r\n\r\nexport interface TextAreaField extends BaseField {\r\n  options: {\r\n    defaultValue: string\r\n    placeholder: string\r\n    label: string\r\n  }\r\n  type: 'textarea'\r\n}\r\n\r\nexport interface SelectField extends BaseField {\r\n  options: {\r\n    defaultValue: string\r\n    label: string\r\n    data: string[]\r\n  }\r\n  type: 'select'\r\n}\r\n\r\nexport type FieldType = TextField | TextAreaField | SelectField\r\n\r\nconst text: TextField = {\r\n  value: '',\r\n  name: 'text',\r\n  label: 'Text input',\r\n  options: {\r\n    defaultValue: '',\r\n    placeholder: 'Placeholder',\r\n    label: 'Text label',\r\n  },\r\n  type: 'text',\r\n}\r\n\r\nconst textarea: TextAreaField = {\r\n  value: '',\r\n  name: 'textarea',\r\n  label: 'Textarea',\r\n  options: {\r\n    defaultValue: '',\r\n    placeholder: 'Another placeholder',\r\n    label: 'Textarea label',\r\n  },\r\n  type: 'textarea',\r\n}\r\n\r\nconst select: SelectField = {\r\n  value: 'test1',\r\n  name: 'select',\r\n  label: 'Select',\r\n  options: {\r\n    defaultValue: 'test1',\r\n    label: 'Select label',\r\n    data: ['test1', 'test2'],\r\n  },\r\n  type: 'select',\r\n}\r\n\r\nexport const defaultFields = {\r\n  text,\r\n  textarea,\r\n  select,\r\n}\r\n\r\nexport default defaultFields\r\n","import React from 'react'\r\n\r\nimport types from './fields.types'\r\nimport style from './form.module.scss'\r\n\r\nconst FieldsSelect = (props: any) => {\r\n  const renderButtons = () => {\r\n    return Object.values(types).map((type) => (\r\n      <li key={type.name}>\r\n        <button type='button' onClick={props.addField(type.name)}>\r\n          {type.label}\r\n        </button>\r\n      </li>\r\n    ))\r\n  }\r\n\r\n  return <ul className={style.list}>{renderButtons()}</ul>\r\n}\r\n\r\nexport default FieldsSelect\r\n","import React from 'react'\r\n\r\nimport { FieldType } from './fields.types'\r\nimport style from './form.module.scss'\r\n\r\ninterface TextDisplayProps {\r\n  fields: FieldType[]\r\n}\r\n\r\nconst TextDisplay = (props: TextDisplayProps) => {\r\n  const { fields } = props\r\n  return (\r\n    <div>\r\n      {fields.map((item) => (\r\n        <div className={style.json} key={item.name}>\r\n          <pre>{JSON.stringify(item, null, 2)}</pre>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TextDisplay\r\n","import React, { useState } from 'react'\r\n\r\nimport useBGColor from '~/hook/useBgColor'\r\n\r\nimport Fields from './Fields'\r\nimport { defaultFields as types, FieldType } from './fields.types'\r\nimport FieldsSelect from './FieldsSelect'\r\nimport style from './form.module.scss'\r\nimport TextDisplay from './TextDisplay'\r\n\r\nexport const FormFields = () => {\r\n  const [fields, setFields] = useState<FieldType[]>([])\r\n\r\n  useBGColor(210, 208, 210)\r\n\r\n  const updateField = (index: number) => (value: any) => {\r\n    const foundField = fields[index]\r\n    const updatedField = { ...foundField, value }\r\n    const updatedFields = [\r\n      ...fields.slice(0, index),\r\n      updatedField,\r\n      ...fields.slice(index + 1),\r\n    ]\r\n    setFields(updatedFields)\r\n  }\r\n\r\n  const addField =\r\n    (name: 'text' | 'textarea' | 'select') => (e: React.MouseEvent) => {\r\n      e.preventDefault()\r\n      const { options } = types[name]\r\n      const newField: any = {\r\n        options,\r\n        name: `${name}_${Date.now()}`,\r\n        type: name,\r\n        value: options.defaultValue,\r\n      }\r\n      setFields([...fields, newField])\r\n    }\r\n\r\n  const removeField = (index: number) => (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    const updatedFields = [\r\n      ...fields.slice(0, index),\r\n      ...fields.slice(index + 1),\r\n    ]\r\n    setFields(updatedFields)\r\n  }\r\n\r\n  return (\r\n    <div className={style.wrapper}>\r\n      <div className={style.column}>\r\n        <FieldsSelect addField={addField} />\r\n        <Fields\r\n          fields={fields}\r\n          updateField={updateField}\r\n          removeField={removeField}\r\n        />\r\n      </div>\r\n      <TextDisplay fields={fields} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormFields\r\n","import React from 'react';\nimport { withCenteredStyle } from '~/_storybook/withCenteredStyle';\nimport { withCustomTheme } from '~/_storybook/withCustomTheme';\nimport { FormFields } from '.';\nexport default {\n  title: 'Native/Form Fields',\n  decorators: [withCenteredStyle({\n    width: '100%',\n    padding: 20\n  }), withCustomTheme]\n};\nexport const Example = () => <FormFields />;\nExample.parameters = {\n  ...Example.parameters,\n  storySource: {\n    source: \"() => <FormFields />\",\n    ...Example.parameters?.storySource\n  }\n};"],"names":["SelectInput","props","onChange","e","value","jsx","item","TextareaInput","classes","TextInput","mapper","mapper1","Fields","renderFields","field","index","jsxs","text","textarea","select","defaultFields","FieldsSelect","renderButtons","types","type","style","TextDisplay","fields","FormFields","setFields","useState","useBGColor","updateField","updatedField","updatedFields","addField","name","options","newField","removeField","FormFields_story","withCenteredStyle","withCustomTheme","Example","_a"],"mappings":"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"}
{"version":3,"file":"_.story-2a81c08a.js","sources":["../../src/components/gesture/TransitionSlider/imgs.ts","../../src/components/gesture/TransitionSlider/Complex.tsx","../../src/components/gesture/TransitionSlider/RepeatedBounds.tsx","../../src/components/gesture/TransitionSlider/Simple.tsx","../../src/components/gesture/TransitionSlider/_.story.tsx"],"sourcesContent":["export default [\r\n  'https://drscdn.500px.org/photo/126979479/w%3D440_h%3D440/v2?webp=true&v=2&sig=09ea71b0ddb91e24a59cecfb79a0189a2ab575d10372d3e8d3258e38f97a6a49',\r\n  'https://drscdn.500px.org/photo/435236/q%3D80_m%3D1500/v2?webp=true&sig=67031bdff6f582f3e027311e2074be452203ab637c0bd21d89128844becf8e40',\r\n  'https://drscdn.500px.org/photo/188823103/w%3D440_h%3D440/v2?webp=true&v=3&sig=af23265ed9beaeeeb12b4f8dfed14dd613e5139495ba4a80d5dcad5cef9e39fd',\r\n  'https://drscdn.500px.org/photo/216094471/w%3D440_h%3D440/v2?webp=true&v=0&sig=16a2312302488ae2ce492fb015677ce672fcecac2befcb8d8e9944cbbfa1b53a',\r\n  'https://drscdn.500px.org/photo/227760547/w%3D440_h%3D440/v2?webp=true&v=0&sig=d00bd3de4cdc411116f82bcc4a4e8a6375ed90a686df8488088bca4b02188c73',\r\n]\r\n","import { useRef } from 'react'\r\n\r\nimport { animated, useSpring } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport clamp from '~/utils/clamp'\r\n\r\nimport classes from './_classes.css'\r\nimport imgs from './imgs'\r\n\r\nconst STEP = 100\r\nconst WIDTH = 200\r\n\r\n// range: [-100, 200]\r\nconst trans = (num: number) =>\r\n  `translate3d(${(num * WIDTH) / STEP}px, 0, 0) ` +\r\n  `scale(${1.2 - (Math.abs(-50 + num) * 4) / (150 * 10)})`\r\n\r\nconst int = (x: number, count: number, i: number) => {\r\n  // Range of possible values\r\n  // [0...max]\r\n  const fullRange = STEP * count\r\n\r\n  // Current x value bounded by full cycle\r\n  // [0...val...max] or [-max...val...0]\r\n  const boundedValue = x % fullRange\r\n\r\n  // Needed for transforming negative value to positive\r\n  // [-max...val...0] => [0...val...max]\r\n  const offset = boundedValue > 0 ? 0 : fullRange\r\n  const positiveValue = boundedValue + offset\r\n\r\n  // Value normilized to [0...val...STEP] for each item\r\n  const itemValue = positiveValue - STEP * i\r\n\r\n  if (i === 0 && positiveValue > fullRange - STEP) {\r\n    // Make first item move like he is startig from STEP * -1 on big values\r\n    return positiveValue - fullRange\r\n  }\r\n\r\n  if (i === count - 1 && positiveValue < STEP) {\r\n    // Make last item move like he is startig from STEP * 2 on low values\r\n    return positiveValue + STEP\r\n  }\r\n\r\n  return clamp(itemValue, STEP * -1, STEP * 2)\r\n}\r\n\r\nexport interface ComplexSliderProps {\r\n  start?: number\r\n  overflow?: boolean\r\n  hideValues?: boolean\r\n}\r\n\r\nexport const ComplexSlider = (props: ComplexSliderProps) => {\r\n  const { start = 0, overflow, hideValues } = props\r\n\r\n  const [{ x }, spring] = useSpring(() => ({\r\n    x: start,\r\n    config: { mass: 5, tension: 170, friction: 80 },\r\n  }))\r\n\r\n  // Ref for memoizing value between drags\r\n  const dragOffset = useRef(start)\r\n\r\n  useDrag(\r\n    ({ movement: [x], down, velocity: [vx], direction: [dx] }) => {\r\n      if (down) {\r\n        spring.start({ x: dragOffset.current + x })\r\n        return\r\n      }\r\n\r\n      dragOffset.current += x + vx * dx * 200\r\n      // dragOffset.current += x\r\n      spring.start({ x: dragOffset.current })\r\n    },\r\n    { target: window, axis: 'x' }\r\n  )\r\n\r\n  const renderImages = () =>\r\n    imgs.map((img, index) => (\r\n      <animated.li\r\n        key={index}\r\n        className={classes.container}\r\n        style={{\r\n          transform: x.to((val) => trans(int(val, imgs.length, index))),\r\n        }}\r\n      >\r\n        <div\r\n          className={classes.img}\r\n          style={{ backgroundImage: `url(${img})` }}\r\n        />\r\n      </animated.li>\r\n    ))\r\n\r\n  const renderValues = () =>\r\n    imgs.map((_, index) => (\r\n      <animated.p className={classes.value} key={index}>\r\n        {x.to((val) => int(val, imgs.length, index).toFixed(0))}\r\n      </animated.p>\r\n    ))\r\n\r\n  return (\r\n    <div\r\n      className={classes.wrapperBig}\r\n      style={{ overflow: overflow ? 'unset' : 'hidden' }}\r\n    >\r\n      <ul className={classes.list}>{renderImages()}</ul>\r\n      {!hideValues && <ul className={classes.values}>{renderValues()}</ul>}\r\n    </div>\r\n  )\r\n}\r\n","import { useRef, useMemo } from 'react'\r\n\r\nimport { animated, useSpring } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport clamp from '~/utils/clamp'\r\n\r\nimport classes from './_classes.css'\r\nimport imgsBase from './imgs'\r\n\r\nconst STEP = 100\r\nconst WIDTH = 100\r\n\r\nconst trans = (val: number) => `translate3d(${(val * WIDTH) / STEP}px, 0, 0)`\r\n// range = [-100, 100 * number]\r\n// number = number shown + 1\r\nconst int = (x: number, count: number, i: number, number: number) => {\r\n  // Range of possible values\r\n  // [0...max]\r\n  const fullRange = STEP * (count - number)\r\n\r\n  // Current x value bounded by full cycle\r\n  // [0...val...max] or [-max...val...0]\r\n  const boundedValue = x % fullRange\r\n\r\n  // Needed for transforming negative value to positive\r\n  // [-max...val...0] => [0...val...max]\r\n  const offset =\r\n    boundedValue > 0 ? STEP * (number - 1) : fullRange + STEP * (number - 1)\r\n\r\n  const positiveValue = boundedValue + offset\r\n\r\n  // Value normilized to [0...val...STEP] for each item\r\n  const itemValue = positiveValue - STEP * i\r\n\r\n  return clamp(itemValue, STEP * -1, STEP * number)\r\n}\r\n\r\nexport interface RepeatedBoundsProps {\r\n  start?: number\r\n  overflow?: boolean\r\n  hideValues?: boolean\r\n  number?: number\r\n}\r\n\r\nexport const RepeatedBounds = (props: RepeatedBoundsProps) => {\r\n  const { start = 0, overflow, hideValues, number = 2 } = props\r\n\r\n  const [{ x }, spring] = useSpring(() => ({\r\n    x: start,\r\n    config: { mass: 5, tension: 170, friction: 80 },\r\n  }))\r\n\r\n  const imgs = useMemo(() => {\r\n    const len = imgsBase.length\r\n    let counter = number\r\n    let result = [...imgsBase]\r\n\r\n    while (counter > len) {\r\n      counter = counter - len\r\n      result = [...imgsBase, ...result]\r\n    }\r\n\r\n    return [...imgsBase.slice(-counter), ...result]\r\n  }, [number])\r\n\r\n  // Ref for memoizing value between drags\r\n  const dragOffset = useRef(start)\r\n\r\n  const bind = useDrag(\r\n    ({ movement: [x], down, velocity: [vx], direction: [dx] }) => {\r\n      if (down) {\r\n        spring.start({ x: dragOffset.current + x })\r\n        return\r\n      }\r\n\r\n      dragOffset.current += x + vx * dx * 200\r\n      // dragOffset.current += x\r\n      spring.start({ x: dragOffset.current })\r\n    },\r\n    { axis: 'x' }\r\n  )\r\n\r\n  const renderImages = () =>\r\n    imgs.map((img, index) => (\r\n      <animated.li\r\n        key={index}\r\n        className={classes.container}\r\n        style={{\r\n          transform: x.to((val) => trans(int(val, imgs.length, index, number))),\r\n          width: WIDTH,\r\n          height: WIDTH,\r\n        }}\r\n      >\r\n        <div\r\n          className={classes.img}\r\n          style={{ backgroundImage: `url(${img})` }}\r\n        />\r\n      </animated.li>\r\n    ))\r\n\r\n  const renderValues = () =>\r\n    imgs.map((_, index) => (\r\n      <animated.p className={classes.value} key={index}>\r\n        {x.to((val) => int(val, imgs.length, index, number).toFixed(0))}\r\n      </animated.p>\r\n    ))\r\n\r\n  return (\r\n    <div\r\n      className={classes.wrapperBig}\r\n      {...bind()}\r\n      style={{ overflow: overflow ? 'unset' : 'hidden', width: number * WIDTH }}\r\n    >\r\n      <ul className={classes.list}>{renderImages()}</ul>\r\n      {!hideValues && <ul className={classes.values}>{renderValues()}</ul>}\r\n    </div>\r\n  )\r\n}\r\n","import useMeasure from 'react-use-measure'\r\n\r\nimport { animated, useSpring } from '@react-spring/web'\r\nimport { useDrag } from '@use-gesture/react'\r\n\r\nimport classes from './_classes.css'\r\nimport imgs from './imgs'\r\n\r\nconst WIDTH = 200\r\n\r\nexport const SimpleSlider = () => {\r\n  const [{ x }, spring] = useSpring(() => ({ x: 0 }))\r\n\r\n  const [ref, { width }] = useMeasure()\r\n\r\n  const onClick = () => {\r\n    const value = x.get()\r\n\r\n    if (-value === width - WIDTH) {\r\n      return\r\n    }\r\n\r\n    if (-value + WIDTH > width - WIDTH) {\r\n      const offset = width - WIDTH + value\r\n      spring.start({ x: value - offset })\r\n    } else {\r\n      spring.start({ x: value - WIDTH })\r\n    }\r\n  }\r\n\r\n  const bind = useDrag(({ offset: [x] }) => spring.start({ x }), {\r\n    bounds: { left: -width + WIDTH, right: 0 },\r\n    from: () => [x.get(), 0],\r\n    rubberband: true,\r\n    axis: 'x',\r\n  })\r\n\r\n  const renderImages = () =>\r\n    imgs.slice(0, 3).map((img, index) => (\r\n      <li className={classes.container} key={index}>\r\n        <div\r\n          className={classes.img}\r\n          style={{ backgroundImage: `url(${img})` }}\r\n        />\r\n      </li>\r\n    ))\r\n\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <animated.ul\r\n        {...bind()}\r\n        ref={ref}\r\n        className={classes.list}\r\n        style={{ x, touchAction: 'none' }}\r\n      >\r\n        {renderImages()}\r\n      </animated.ul>\r\n      <button\r\n        onClick={onClick}\r\n        style={{ position: 'absolute', bottom: 5, right: 5 }}\r\n      >\r\n        Scroll right\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentStory } from '@storybook/react';\nimport { withCenteredStyle } from '~/_storybook/withCenteredStyle';\nimport { withCustomTheme } from '~/_storybook/withCustomTheme';\nimport { ComplexSlider } from './Complex';\nimport { RepeatedBounds } from './RepeatedBounds';\nimport { SimpleSlider } from './Simple';\nexport default {\n  title: 'Gesture/Transition Slider',\n  decorators: [withCenteredStyle({\n    width: '100%',\n    minHeight: '110vh',\n    display: 'grid',\n    placeItems: 'center'\n  }), withCustomTheme]\n};\nexport const _SimpleSlider = () => <SimpleSlider />;\n\n// -----------------\n\nconst Template: ComponentStory<typeof ComplexSlider> = props => <ComplexSlider {...props} />;\nexport const _ComplexSlider = Template.bind({});\n_ComplexSlider.args = {\n  hideValues: false,\n  start: 50,\n  overflow: false\n};\n\n// -----------------\n\nconst Template1: ComponentStory<typeof RepeatedBounds> = props => <RepeatedBounds {...props} />;\nexport const _RepeatedBounds = Template1.bind({});\n_RepeatedBounds.args = {\n  hideValues: false,\n  number: 4,\n  overflow: false\n};\n_SimpleSlider.parameters = {\n  ..._SimpleSlider.parameters,\n  storySource: {\n    source: \"() => <SimpleSlider />\",\n    ..._SimpleSlider.parameters?.storySource\n  }\n};\n_ComplexSlider.parameters = {\n  ..._ComplexSlider.parameters,\n  storySource: {\n    source: \"props => <ComplexSlider {...props} />\",\n    ..._ComplexSlider.parameters?.storySource\n  }\n};\n_RepeatedBounds.parameters = {\n  ..._RepeatedBounds.parameters,\n  storySource: {\n    source: \"props => <RepeatedBounds {...props} />\",\n    ..._RepeatedBounds.parameters?.storySource\n  }\n};"],"names":["imgs","STEP","WIDTH","trans","num","int","x","count","i","fullRange","boundedValue","offset","positiveValue","itemValue","clamp","ComplexSlider","props","start","overflow","hideValues","spring","useSpring","dragOffset","useRef","useDrag","x2","down","vx","dx","renderImages","img","index","jsx","animated","classes","val","renderValues","_","jsxs","number","RepeatedBounds","useMemo","len","imgsBase","counter","result","bind","SimpleSlider","ref","width","useMeasure","onClick","value","__story","withCenteredStyle","withCustomTheme","_SimpleSlider","Template","_ComplexSlider","Template1","_RepeatedBounds","_a"],"mappings":"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"}